# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: secret/intertx/v1beta1/query.proto, secret/intertx/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MsgRegisterAccount(betterproto.Message):
    """
    MsgRegisterAccount registers an interchain account for the given owner over
    the specified connection pair
    """

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgRegisterAccountResponse(betterproto.Message):
    """
    MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
    """

    pass


@dataclass(eq=False, repr=False)
class MsgSubmitTx(betterproto.Message):
    """
    MsgSubmitTx creates and submits an arbitrary transaction msg to be executed
    using an interchain account
    """

    owner: bytes = betterproto.bytes_field(1)
    connection_id: str = betterproto.string_field(2)
    msg: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgSubmitTxResponse(betterproto.Message):
    """MsgSubmitTxResponse defines the MsgSubmitTx response type"""

    pass


@dataclass(eq=False, repr=False)
class QueryInterchainAccountFromAddressRequest(betterproto.Message):
    """
    QueryInterchainAccountFromAddressRequest is the request type for the
    Query/InterchainAccountAddress RPC
    """

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryInterchainAccountFromAddressResponse(betterproto.Message):
    """
    QueryInterchainAccountFromAddressResponse the response type for the
    Query/InterchainAccountAddress RPC
    """

    interchain_account_address: str = betterproto.string_field(1)


class MsgStub(betterproto.ServiceStub):
    async def register_account(
        self, *, owner: str = "", connection_id: str = ""
    ) -> "MsgRegisterAccountResponse":

        request = MsgRegisterAccount()
        request.owner = owner
        request.connection_id = connection_id

        return await self._unary_unary(
            "/secret.intertx.v1beta1.Msg/RegisterAccount",
            request,
            MsgRegisterAccountResponse,
        )

    async def submit_tx(
        self,
        *,
        owner: bytes = b"",
        connection_id: str = "",
        msg: "betterproto_lib_google_protobuf.Any" = None
    ) -> "MsgSubmitTxResponse":

        request = MsgSubmitTx()
        request.owner = owner
        request.connection_id = connection_id
        if msg is not None:
            request.msg = msg

        return await self._unary_unary(
            "/secret.intertx.v1beta1.Msg/SubmitTx", request, MsgSubmitTxResponse
        )


class QueryStub(betterproto.ServiceStub):
    async def interchain_account_from_address(
        self, *, owner: str = "", connection_id: str = ""
    ) -> "QueryInterchainAccountFromAddressResponse":

        request = QueryInterchainAccountFromAddressRequest()
        request.owner = owner
        request.connection_id = connection_id

        return await self._unary_unary(
            "/secret.intertx.v1beta1.Query/InterchainAccountFromAddress",
            request,
            QueryInterchainAccountFromAddressResponse,
        )


class MsgBase(ServiceBase):
    async def register_account(
        self, owner: str, connection_id: str
    ) -> "MsgRegisterAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_tx(
        self,
        owner: bytes,
        connection_id: str,
        msg: "betterproto_lib_google_protobuf.Any",
    ) -> "MsgSubmitTxResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_register_account(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "owner": request.owner,
            "connection_id": request.connection_id,
        }

        response = await self.register_account(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_submit_tx(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "owner": request.owner,
            "connection_id": request.connection_id,
            "msg": request.msg,
        }

        response = await self.submit_tx(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/secret.intertx.v1beta1.Msg/RegisterAccount": grpclib.const.Handler(
                self.__rpc_register_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRegisterAccount,
                MsgRegisterAccountResponse,
            ),
            "/secret.intertx.v1beta1.Msg/SubmitTx": grpclib.const.Handler(
                self.__rpc_submit_tx,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitTx,
                MsgSubmitTxResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def interchain_account_from_address(
        self, owner: str, connection_id: str
    ) -> "QueryInterchainAccountFromAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_interchain_account_from_address(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "owner": request.owner,
            "connection_id": request.connection_id,
        }

        response = await self.interchain_account_from_address(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/secret.intertx.v1beta1.Query/InterchainAccountFromAddress": grpclib.const.Handler(
                self.__rpc_interchain_account_from_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInterchainAccountFromAddressRequest,
                QueryInterchainAccountFromAddressResponse,
            ),
        }


import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
