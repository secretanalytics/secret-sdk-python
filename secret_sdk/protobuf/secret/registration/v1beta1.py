# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: secret/registration/v1beta1/msg.proto, secret/registration/v1beta1/types.proto, secret/registration/v1beta1/genesis.proto, secret/registration/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

from .google import protobuf


@dataclass
class RaAuthenticate(betterproto.Message):
    # bytes sender = 1 [ (gogoproto.casttype) =
    # "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
    sender: str = betterproto.string_field(1)
    certificate: bytes = betterproto.bytes_field(2)
    # string sender_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString"
    # ];
    sender_addr: bytes = betterproto.bytes_field(3)


@dataclass
class RaAuthenticateResponse(betterproto.Message):
    data: str = betterproto.string_field(1)
    events: str = betterproto.string_field(2)


@dataclass
class MasterKey(betterproto.Message):
    bytes: bytes = betterproto.bytes_field(1)


@dataclass
class Key(betterproto.Message):
    key: bytes = betterproto.bytes_field(1)


@dataclass
class SeedConfig(betterproto.Message):
    master_key: str = betterproto.string_field(1)
    encrypted_key: str = betterproto.string_field(2)
    version: int = betterproto.uint32_field(3)


@dataclass
class LegacySeedConfig(betterproto.Message):
    master_cert: str = betterproto.string_field(1)
    encrypted_key: str = betterproto.string_field(2)


@dataclass
class RegistrationNodeInfo(betterproto.Message):
    certificate: bytes = betterproto.bytes_field(1)
    encrypted_seed: bytes = betterproto.bytes_field(2)


@dataclass
class GenesisState(betterproto.Message):
    registration: List["RegistrationNodeInfo"] = betterproto.message_field(1)
    node_exch_master_key: "MasterKey" = betterproto.message_field(2)
    io_master_key: "MasterKey" = betterproto.message_field(3)


@dataclass
class QueryEncryptedSeedRequest(betterproto.Message):
    pub_key: bytes = betterproto.bytes_field(1)


@dataclass
class QueryEncryptedSeedResponse(betterproto.Message):
    encrypted_seed: bytes = betterproto.bytes_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the wasm Msg service."""

    async def register_auth(
        self, *, sender: str = "", certificate: bytes = b"", sender_addr: bytes = b""
    ) -> RaAuthenticateResponse:
        """Register and authenticate new node"""

        request = RaAuthenticate()
        request.sender = sender
        request.certificate = certificate
        request.sender_addr = sender_addr

        return await self._unary_unary(
            "/secret.registration.v1beta1.Msg/RegisterAuth",
            request,
            RaAuthenticateResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query provides defines the gRPC querier service"""

    async def tx_key(self) -> Key:
        """Returns the key used for transactions"""

        request = protobuf.Empty()

        return await self._unary_unary(
            "/secret.registration.v1beta1.Query/TxKey",
            request,
            Key,
        )

    async def registration_key(self) -> Key:
        """Returns the key used for registration"""

        request = protobuf.Empty()

        return await self._unary_unary(
            "/secret.registration.v1beta1.Query/RegistrationKey",
            request,
            Key,
        )

    async def encrypted_seed(
        self, *, pub_key: bytes = b""
    ) -> QueryEncryptedSeedResponse:
        """Returns the encrypted seed for a registered node by public key"""

        request = QueryEncryptedSeedRequest()
        request.pub_key = pub_key

        return await self._unary_unary(
            "/secret.registration.v1beta1.Query/EncryptedSeed",
            request,
            QueryEncryptedSeedResponse,
        )
