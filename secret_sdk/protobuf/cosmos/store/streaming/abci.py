# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/store/streaming/abci/grpc.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.store import v1beta1
from .tendermint import abci


@dataclass
class ListenFinalizeBlockRequest(betterproto.Message):
    """
    ListenEndBlockRequest is the request type for the ListenEndBlock RPC method
    """

    req: abci.RequestFinalizeBlock = betterproto.message_field(1)
    res: abci.ResponseFinalizeBlock = betterproto.message_field(2)


@dataclass
class ListenFinalizeBlockResponse(betterproto.Message):
    """
    ListenEndBlockResponse is the response type for the ListenEndBlock RPC
    method
    """

    pass


@dataclass
class ListenCommitRequest(betterproto.Message):
    """
    ListenCommitRequest is the request type for the ListenCommit RPC method
    """

    # explicitly pass in block height as ResponseCommit does not contain this
    # info
    block_height: int = betterproto.int64_field(1)
    res: abci.ResponseCommit = betterproto.message_field(2)
    change_set: List[v1beta1.StoreKVPair] = betterproto.message_field(3)


@dataclass
class ListenCommitResponse(betterproto.Message):
    """
    ListenCommitResponse is the response type for the ListenCommit RPC method
    """

    pass


class ABCIListenerServiceStub(betterproto.ServiceStub):
    """
    ABCIListenerService is the service for the BaseApp ABCIListener interface
    """

    async def listen_finalize_block(
        self,
        *,
        req: Optional[abci.RequestFinalizeBlock] = None,
        res: Optional[abci.ResponseFinalizeBlock] = None,
    ) -> ListenFinalizeBlockResponse:
        """
        ListenFinalizeBlock is the corresponding endpoint for
        ABCIListener.ListenEndBlock
        """

        request = ListenFinalizeBlockRequest()
        if req is not None:
            request.req = req
        if res is not None:
            request.res = res

        return await self._unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenFinalizeBlock",
            request,
            ListenFinalizeBlockResponse,
        )

    async def listen_commit(
        self,
        *,
        block_height: int = 0,
        res: Optional[abci.ResponseCommit] = None,
        change_set: List[v1beta1.StoreKVPair] = [],
    ) -> ListenCommitResponse:
        """
        ListenCommit is the corresponding endpoint for
        ABCIListener.ListenCommit
        """

        request = ListenCommitRequest()
        request.block_height = block_height
        if res is not None:
            request.res = res
        if change_set is not None:
            request.change_set = change_set

        return await self._unary_unary(
            "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
            request,
            ListenCommitResponse,
        )
