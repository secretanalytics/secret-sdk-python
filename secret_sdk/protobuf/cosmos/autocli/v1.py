# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/autocli/v1/options.proto, cosmos/autocli/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
import grpclib


@dataclass
class ModuleOptions(betterproto.Message):
    """ModuleOptions describes the CLI options for a Cosmos SDK module."""

    # tx describes the tx commands for the module.
    tx: "ServiceCommandDescriptor" = betterproto.message_field(1)
    # query describes the queries commands for the module.
    query: "ServiceCommandDescriptor" = betterproto.message_field(2)


@dataclass
class ServiceCommandDescriptor(betterproto.Message):
    """
    ServiceCommandDescriptor describes a CLI command based on a protobuf
    service.
    """

    # service is the fully qualified name of the protobuf service to build the
    # command from. It can be left empty if sub_commands are used instead which
    # may be the case if a module provides multiple tx and/or query services.
    service: str = betterproto.string_field(1)
    # rpc_command_options are options for commands generated from rpc methods. If
    # no options are specified for a given rpc method on the service, a command
    # will be generated for that method with the default options.
    rpc_command_options: List["RpcCommandOptions"] = betterproto.message_field(2)
    # sub_commands is a map of optional sub-commands for this command based on
    # different protobuf services. The map key is used as the name of the sub-
    # command.
    sub_commands: Dict[str, "ServiceCommandDescriptor"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class RpcCommandOptions(betterproto.Message):
    """
    RpcCommandOptions specifies options for commands generated from protobuf
    rpc methods.
    """

    # rpc_method is short name of the protobuf rpc method that this command is
    # generated from.
    rpc_method: str = betterproto.string_field(1)
    # use is the one-line usage method. It also allows specifying an alternate
    # name for the command as the first word of the usage text. By default the
    # name of an rpc command is the kebab-case short name of the rpc method.
    use: str = betterproto.string_field(2)
    # long is the long message shown in the 'help <this-command>' output.
    long: str = betterproto.string_field(3)
    # short is the short description shown in the 'help' output.
    short: str = betterproto.string_field(4)
    # example is examples of how to use the command.
    example: str = betterproto.string_field(5)
    # alias is an array of aliases that can be used instead of the first word in
    # Use.
    alias: List[str] = betterproto.string_field(6)
    # suggest_for is an array of command names for which this command will be
    # suggested - similar to aliases but only suggests.
    suggest_for: List[str] = betterproto.string_field(7)
    # deprecated defines, if this command is deprecated and should print this
    # string when used.
    deprecated: str = betterproto.string_field(8)
    # version defines the version for this command. If this value is non-empty
    # and the command does not define a "version" flag, a "version" boolean flag
    # will be added to the command and, if specified, will print content of the
    # "Version" variable. A shorthand "v" flag will also be added if the command
    # does not define one.
    version: str = betterproto.string_field(9)
    # flag_options are options for flags generated from rpc request fields. By
    # default all request fields are configured as flags. They can also be
    # configured as positional args instead using positional_args.
    flag_options: Dict[str, "FlagOptions"] = betterproto.map_field(
        10, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # positional_args specifies positional arguments for the command.
    positional_args: List["PositionalArgDescriptor"] = betterproto.message_field(11)
    # skip specifies whether to skip this rpc method when generating commands.
    skip: bool = betterproto.bool_field(12)


@dataclass
class FlagOptions(betterproto.Message):
    """
    FlagOptions are options for flags generated from rpc request fields. By
    default, all request fields are configured as flags based on the kebab-case
    name of the field. Fields can be turned into positional arguments instead
    by using RpcCommandOptions.positional_args.
    """

    # name is an alternate name to use for the field flag.
    name: str = betterproto.string_field(1)
    # shorthand is a one-letter abbreviated flag.
    shorthand: str = betterproto.string_field(2)
    # usage is the help message.
    usage: str = betterproto.string_field(3)
    # default_value is the default value as text.
    default_value: str = betterproto.string_field(4)
    # deprecated is the usage text to show if this flag is deprecated.
    deprecated: str = betterproto.string_field(6)
    # shorthand_deprecated is the usage text to show if the shorthand of this
    # flag is deprecated.
    shorthand_deprecated: str = betterproto.string_field(7)
    # hidden hides the flag from help/usage text
    hidden: bool = betterproto.bool_field(8)


@dataclass
class PositionalArgDescriptor(betterproto.Message):
    """PositionalArgDescriptor describes a positional argument."""

    # proto_field specifies the proto field to use as the positional arg. Any
    # fields used as positional args will not have a flag generated.
    proto_field: str = betterproto.string_field(1)
    # varargs makes a positional parameter a varargs parameter. This can only be
    # applied to last positional parameter and the proto_field must a repeated
    # field.
    varargs: bool = betterproto.bool_field(2)


@dataclass
class AppOptionsRequest(betterproto.Message):
    """AppOptionsRequest is the RemoteInfoService/AppOptions request type."""

    pass


@dataclass
class AppOptionsResponse(betterproto.Message):
    """
    AppOptionsResponse is the RemoteInfoService/AppOptions response type.
    """

    # module_options is a map of module name to autocli module options.
    module_options: Dict[str, "ModuleOptions"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


class QueryStub(betterproto.ServiceStub):
    """
    RemoteInfoService provides clients with the information they need to build
    dynamically CLI clients for remote chains.
    """

    async def app_options(self) -> AppOptionsResponse:
        """
        AppOptions returns the autocli options for all of the modules in an
        app.
        """

        request = AppOptionsRequest()

        return await self._unary_unary(
            "/cosmos.autocli.v1.Query/AppOptions",
            request,
            AppOptionsResponse,
        )
