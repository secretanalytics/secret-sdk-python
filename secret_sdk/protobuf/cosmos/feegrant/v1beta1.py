# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/feegrant/v1beta1/tx.proto, cosmos/feegrant/v1beta1/feegrant.proto, cosmos/feegrant/v1beta1/genesis.proto, cosmos/feegrant/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1
from .google import protobuf


@dataclass
class MsgGrantAllowance(betterproto.Message):
    """
    MsgGrantAllowance adds permission for Grantee to spend up to Allowance of
    fees from the account of Granter.
    """

    # granter is the address of the user granting an allowance of their funds.
    granter: str = betterproto.string_field(1)
    # grantee is the address of the user being granted an allowance of another
    # user's funds.
    grantee: str = betterproto.string_field(2)
    # allowance can be any of basic, periodic, allowed fee allowance.
    allowance: protobuf.Any = betterproto.message_field(3)


@dataclass
class MsgGrantAllowanceResponse(betterproto.Message):
    """
    MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
    type.
    """

    pass


@dataclass
class MsgRevokeAllowance(betterproto.Message):
    """
    MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
    """

    # granter is the address of the user granting an allowance of their funds.
    granter: str = betterproto.string_field(1)
    # grantee is the address of the user being granted an allowance of another
    # user's funds.
    grantee: str = betterproto.string_field(2)


@dataclass
class MsgRevokeAllowanceResponse(betterproto.Message):
    """
    MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response
    type.
    """

    pass


@dataclass
class MsgPruneAllowances(betterproto.Message):
    """
    MsgPruneAllowances prunes expired fee allowances. Since cosmos-sdk 0.50
    """

    # pruner is the address of the user pruning expired allowances.
    pruner: str = betterproto.string_field(1)


@dataclass
class MsgPruneAllowancesResponse(betterproto.Message):
    """
    MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse response
    type. Since cosmos-sdk 0.50
    """

    pass


@dataclass
class BasicAllowance(betterproto.Message):
    """
    BasicAllowance implements Allowance with a one-time grant of coins that
    optionally expires. The grantee can use up to SpendLimit to cover fees.
    """

    # spend_limit specifies the maximum amount of coins that can be spent by this
    # allowance and will be updated as coins are spent. If it is empty, there is
    # no spend limit and any amount of coins can be spent.
    spend_limit: List[v1beta1.Coin] = betterproto.message_field(1)
    # expiration specifies an optional time when this allowance expires
    expiration: datetime = betterproto.message_field(2)


@dataclass
class PeriodicAllowance(betterproto.Message):
    """
    PeriodicAllowance extends Allowance to allow for both a maximum cap, as
    well as a limit per time period.
    """

    # basic specifies a struct of `BasicAllowance`
    basic: "BasicAllowance" = betterproto.message_field(1)
    # period specifies the time duration in which period_spend_limit coins can be
    # spent before that allowance is reset
    period: timedelta = betterproto.message_field(2)
    # period_spend_limit specifies the maximum number of coins that can be spent
    # in the period
    period_spend_limit: List[v1beta1.Coin] = betterproto.message_field(3)
    # period_can_spend is the number of coins left to be spent before the
    # period_reset time
    period_can_spend: List[v1beta1.Coin] = betterproto.message_field(4)
    # period_reset is the time at which this period resets and a new one begins,
    # it is calculated from the start time of the first transaction after the
    # last period ended
    period_reset: datetime = betterproto.message_field(5)


@dataclass
class AllowedMsgAllowance(betterproto.Message):
    """
    AllowedMsgAllowance creates allowance only for specified message types.
    """

    # allowance can be any of basic and periodic fee allowance.
    allowance: protobuf.Any = betterproto.message_field(1)
    # allowed_messages are the messages for which the grantee has the access.
    allowed_messages: List[str] = betterproto.string_field(2)


@dataclass
class Grant(betterproto.Message):
    """Grant is stored in the KVStore to record a grant with full context"""

    # granter is the address of the user granting an allowance of their funds.
    granter: str = betterproto.string_field(1)
    # grantee is the address of the user being granted an allowance of another
    # user's funds.
    grantee: str = betterproto.string_field(2)
    # allowance can be any of basic, periodic, allowed fee allowance.
    allowance: protobuf.Any = betterproto.message_field(3)


@dataclass
class GenesisState(betterproto.Message):
    """
    GenesisState contains a set of fee allowances, persisted from the store
    """

    allowances: List["Grant"] = betterproto.message_field(1)


@dataclass
class QueryAllowanceRequest(betterproto.Message):
    """
    QueryAllowanceRequest is the request type for the Query/Allowance RPC
    method.
    """

    # granter is the address of the user granting an allowance of their funds.
    granter: str = betterproto.string_field(1)
    # grantee is the address of the user being granted an allowance of another
    # user's funds.
    grantee: str = betterproto.string_field(2)


@dataclass
class QueryAllowanceResponse(betterproto.Message):
    """
    QueryAllowanceResponse is the response type for the Query/Allowance RPC
    method.
    """

    # allowance is a allowance granted for grantee by granter.
    allowance: "Grant" = betterproto.message_field(1)


@dataclass
class QueryAllowancesRequest(betterproto.Message):
    """
    QueryAllowancesRequest is the request type for the Query/Allowances RPC
    method.
    """

    grantee: str = betterproto.string_field(1)
    # pagination defines an pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryAllowancesResponse(betterproto.Message):
    """
    QueryAllowancesResponse is the response type for the Query/Allowances RPC
    method.
    """

    # allowances are allowance's granted for grantee by granter.
    allowances: List["Grant"] = betterproto.message_field(1)
    # pagination defines an pagination for the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryAllowancesByGranterRequest(betterproto.Message):
    """
    QueryAllowancesByGranterRequest is the request type for the
    Query/AllowancesByGranter RPC method. Since: cosmos-sdk 0.46
    """

    granter: str = betterproto.string_field(1)
    # pagination defines an pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryAllowancesByGranterResponse(betterproto.Message):
    """
    QueryAllowancesByGranterResponse is the response type for the
    Query/AllowancesByGranter RPC method. Since: cosmos-sdk 0.46
    """

    # allowances that have been issued by the granter.
    allowances: List["Grant"] = betterproto.message_field(1)
    # pagination defines an pagination for the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the feegrant msg service."""

    async def grant_allowance(
        self,
        *,
        granter: str = "",
        grantee: str = "",
        allowance: Optional[protobuf.Any] = None,
    ) -> MsgGrantAllowanceResponse:
        """
        GrantAllowance grants fee allowance to the grantee on the granter's
        account with the provided expiration time.
        """

        request = MsgGrantAllowance()
        request.granter = granter
        request.grantee = grantee
        if allowance is not None:
            request.allowance = allowance

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/GrantAllowance",
            request,
            MsgGrantAllowanceResponse,
        )

    async def revoke_allowance(
        self, *, granter: str = "", grantee: str = ""
    ) -> MsgRevokeAllowanceResponse:
        """
        RevokeAllowance revokes any fee allowance of granter's account that has
        been granted to the grantee.
        """

        request = MsgRevokeAllowance()
        request.granter = granter
        request.grantee = grantee

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/RevokeAllowance",
            request,
            MsgRevokeAllowanceResponse,
        )

    async def prune_allowances(self, *, pruner: str = "") -> MsgPruneAllowancesResponse:
        """
        PruneAllowances prunes expired fee allowances, currently up to 75 at a
        time. Since cosmos-sdk 0.50
        """

        request = MsgPruneAllowances()
        request.pruner = pruner

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Msg/PruneAllowances",
            request,
            MsgPruneAllowancesResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def allowance(
        self, *, granter: str = "", grantee: str = ""
    ) -> QueryAllowanceResponse:
        """
        Allowance returns granted allwance to the grantee by the granter.
        """

        request = QueryAllowanceRequest()
        request.granter = granter
        request.grantee = grantee

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowance",
            request,
            QueryAllowanceResponse,
        )

    async def allowances(
        self, *, grantee: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryAllowancesResponse:
        """Allowances returns all the grants for the given grantee address."""

        request = QueryAllowancesRequest()
        request.grantee = grantee
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/Allowances",
            request,
            QueryAllowancesResponse,
        )

    async def allowances_by_granter(
        self, *, granter: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryAllowancesByGranterResponse:
        """
        AllowancesByGranter returns all the grants given by an address Since:
        cosmos-sdk 0.46
        """

        request = QueryAllowancesByGranterRequest()
        request.granter = granter
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.feegrant.v1beta1.Query/AllowancesByGranter",
            request,
            QueryAllowancesByGranterResponse,
        )
