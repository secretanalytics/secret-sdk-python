# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/bank/v1beta1/bank.proto, cosmos/bank/v1beta1/tx.proto, cosmos/bank/v1beta1/authz.proto, cosmos/bank/v1beta1/genesis.proto, cosmos/bank/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the bank module."""

    # Deprecated: Use of SendEnabled in params is deprecated. For genesis, use
    # the newly added send_enabled field in the genesis object. Storage, lookup,
    # and manipulation of this information is now in the keeper. As of cosmos-sdk
    # 0.47, this only exists for backwards compatibility of genesis files.
    send_enabled: List["SendEnabled"] = betterproto.message_field(1)
    default_send_enabled: bool = betterproto.bool_field(2)


@dataclass
class SendEnabled(betterproto.Message):
    """
    SendEnabled maps coin denom to a send_enabled status (whether a denom is
    sendable).
    """

    denom: str = betterproto.string_field(1)
    enabled: bool = betterproto.bool_field(2)


@dataclass
class Input(betterproto.Message):
    """Input models transaction input."""

    address: str = betterproto.string_field(1)
    coins: List[v1beta1.Coin] = betterproto.message_field(2)


@dataclass
class Output(betterproto.Message):
    """Output models transaction outputs."""

    address: str = betterproto.string_field(1)
    coins: List[v1beta1.Coin] = betterproto.message_field(2)


@dataclass
class Supply(betterproto.Message):
    """
    Supply represents a struct that passively keeps track of the total supply
    amounts in the network. This message is deprecated now that supply is
    indexed by denom.
    """

    total: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class DenomUnit(betterproto.Message):
    """
    DenomUnit represents a struct that describes a given denomination unit of
    the basic token.
    """

    # denom represents the string name of the given denom unit (e.g uatom).
    denom: str = betterproto.string_field(1)
    # exponent represents power of 10 exponent that one must raise the base_denom
    # to in order to equal the given DenomUnit's denom 1 denom = 10^exponent
    # base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of
    # 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
    exponent: int = betterproto.uint32_field(2)
    # aliases is a list of string aliases for the given denom
    aliases: List[str] = betterproto.string_field(3)


@dataclass
class Metadata(betterproto.Message):
    """Metadata represents a struct that describes a basic token."""

    description: str = betterproto.string_field(1)
    # denom_units represents the list of DenomUnit's for a given coin
    denom_units: List["DenomUnit"] = betterproto.message_field(2)
    # base represents the base denom (should be the DenomUnit with exponent = 0).
    base: str = betterproto.string_field(3)
    # display indicates the suggested denom that should be displayed in clients.
    display: str = betterproto.string_field(4)
    # name defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
    name: str = betterproto.string_field(5)
    # symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
    # be the same as the display. Since: cosmos-sdk 0.43
    symbol: str = betterproto.string_field(6)
    # URI to a document (on or off-chain) that contains additional information.
    # Optional. Since: cosmos-sdk 0.46
    uri: str = betterproto.string_field(7)
    # URIHash is a sha256 hash of a document pointed by URI. It's used to verify
    # that the document didn't change. Optional. Since: cosmos-sdk 0.46
    uri_hash: str = betterproto.string_field(8)


@dataclass
class MsgSend(betterproto.Message):
    """
    MsgSend represents a message to send coins from one account to another.
    """

    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    amount: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class MsgSendResponse(betterproto.Message):
    """MsgSendResponse defines the Msg/Send response type."""

    pass


@dataclass
class MsgMultiSend(betterproto.Message):
    """
    MsgMultiSend represents an arbitrary multi-in, multi-out send message.
    """

    # Inputs, despite being `repeated`, only allows one sender input. This is
    # checked in MsgMultiSend's ValidateBasic.
    inputs: List["Input"] = betterproto.message_field(1)
    outputs: List["Output"] = betterproto.message_field(2)


@dataclass
class MsgMultiSendResponse(betterproto.Message):
    """MsgMultiSendResponse defines the Msg/MultiSend response type."""

    pass


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)
    # params defines the x/bank parameters to update. NOTE: All parameters must
    # be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class MsgSetSendEnabled(betterproto.Message):
    """
    MsgSetSendEnabled is the Msg/SetSendEnabled request type. Only entries to
    add/update/delete need to be included. Existing SendEnabled entries that
    are not included in this message are left unchanged. Since: cosmos-sdk 0.47
    """

    # authority is the address that controls the module.
    authority: str = betterproto.string_field(1)
    # send_enabled is the list of entries to add or update.
    send_enabled: List["SendEnabled"] = betterproto.message_field(2)
    # use_default_for is a list of denoms that should use the
    # params.default_send_enabled value. Denoms listed here will have their
    # SendEnabled entries deleted. If a denom is included that doesn't have a
    # SendEnabled entry, it will be ignored.
    use_default_for: List[str] = betterproto.string_field(3)


@dataclass
class MsgSetSendEnabledResponse(betterproto.Message):
    """
    MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response type.
    Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class SendAuthorization(betterproto.Message):
    """
    SendAuthorization allows the grantee to spend up to spend_limit coins from
    the granter's account. Since: cosmos-sdk 0.43
    """

    spend_limit: List[v1beta1.Coin] = betterproto.message_field(1)
    # allow_list specifies an optional list of addresses to whom the grantee can
    # send tokens on behalf of the granter. If omitted, any recipient is allowed.
    # Since: cosmos-sdk 0.47
    allow_list: List[str] = betterproto.string_field(2)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the bank module's genesis state."""

    # params defines all the parameters of the module.
    params: "Params" = betterproto.message_field(1)
    # balances is an array containing the balances of all the accounts.
    balances: List["Balance"] = betterproto.message_field(2)
    # supply represents the total supply. If it is left empty, then supply will
    # be calculated based on the provided balances. Otherwise, it will be used to
    # validate that the sum of the balances equals this amount.
    supply: List[v1beta1.Coin] = betterproto.message_field(3)
    # denom_metadata defines the metadata of the different coins.
    denom_metadata: List["Metadata"] = betterproto.message_field(4)
    # send_enabled defines the denoms where send is enabled or disabled. Since:
    # cosmos-sdk 0.47
    send_enabled: List["SendEnabled"] = betterproto.message_field(5)


@dataclass
class Balance(betterproto.Message):
    """
    Balance defines an account address and balance pair used in the bank
    module's genesis state.
    """

    # address is the address of the balance holder.
    address: str = betterproto.string_field(1)
    # coins defines the different coins this balance holds.
    coins: List[v1beta1.Coin] = betterproto.message_field(2)


@dataclass
class QueryBalanceRequest(betterproto.Message):
    """
    QueryBalanceRequest is the request type for the Query/Balance RPC method.
    """

    # address is the address to query balances for.
    address: str = betterproto.string_field(1)
    # denom is the coin denom to query balances for.
    denom: str = betterproto.string_field(2)


@dataclass
class QueryBalanceResponse(betterproto.Message):
    """
    QueryBalanceResponse is the response type for the Query/Balance RPC method.
    """

    # balance is the balance of the coin.
    balance: v1beta1.Coin = betterproto.message_field(1)


@dataclass
class QueryAllBalancesRequest(betterproto.Message):
    """
    QueryBalanceRequest is the request type for the Query/AllBalances RPC
    method.
    """

    # address is the address to query balances for.
    address: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)
    # resolve_denom is the flag to resolve the denom into a human-readable form
    # from the metadata. Since: cosmos-sdk 0.50
    resolve_denom: bool = betterproto.bool_field(3)


@dataclass
class QueryAllBalancesResponse(betterproto.Message):
    """
    QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
    method.
    """

    # balances is the balances of all the coins.
    balances: List[v1beta1.Coin] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QuerySpendableBalancesRequest(betterproto.Message):
    """
    QuerySpendableBalancesRequest defines the gRPC request structure for
    querying an account's spendable balances. Since: cosmos-sdk 0.46
    """

    # address is the address to query spendable balances for.
    address: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QuerySpendableBalancesResponse(betterproto.Message):
    """
    QuerySpendableBalancesResponse defines the gRPC response structure for
    querying an account's spendable balances. Since: cosmos-sdk 0.46
    """

    # balances is the spendable balances of all the coins.
    balances: List[v1beta1.Coin] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QuerySpendableBalanceByDenomRequest(betterproto.Message):
    """
    QuerySpendableBalanceByDenomRequest defines the gRPC request structure for
    querying an account's spendable balance for a specific denom. Since:
    cosmos-sdk 0.47
    """

    # address is the address to query balances for.
    address: str = betterproto.string_field(1)
    # denom is the coin denom to query balances for.
    denom: str = betterproto.string_field(2)


@dataclass
class QuerySpendableBalanceByDenomResponse(betterproto.Message):
    """
    QuerySpendableBalanceByDenomResponse defines the gRPC response structure
    for querying an account's spendable balance for a specific denom. Since:
    cosmos-sdk 0.47
    """

    # balance is the balance of the coin.
    balance: v1beta1.Coin = betterproto.message_field(1)


@dataclass
class QueryTotalSupplyRequest(betterproto.Message):
    """
    QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
    method.
    """

    # pagination defines an optional pagination for the request. Since: cosmos-
    # sdk 0.43
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryTotalSupplyResponse(betterproto.Message):
    """
    QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
    method
    """

    # supply is the supply of the coins
    supply: List[v1beta1.Coin] = betterproto.message_field(1)
    # pagination defines the pagination in the response. Since: cosmos-sdk 0.43
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QuerySupplyOfRequest(betterproto.Message):
    """
    QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
    """

    # denom is the coin denom to query balances for.
    denom: str = betterproto.string_field(1)


@dataclass
class QuerySupplyOfResponse(betterproto.Message):
    """
    QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
    method.
    """

    # amount is the supply of the coin.
    amount: v1beta1.Coin = betterproto.message_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest defines the request type for querying x/bank parameters.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse defines the response type for querying x/bank
    parameters.
    """

    # params provides the parameters of the bank module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryDenomsMetadataRequest(betterproto.Message):
    """
    QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata
    RPC method.
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryDenomsMetadataResponse(betterproto.Message):
    """
    QueryDenomsMetadataResponse is the response type for the
    Query/DenomsMetadata RPC method.
    """

    # metadata provides the client information for all the registered tokens.
    metadatas: List["Metadata"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDenomMetadataRequest(betterproto.Message):
    """
    QueryDenomMetadataRequest is the request type for the Query/DenomMetadata
    RPC method.
    """

    # denom is the coin denom to query the metadata for.
    denom: str = betterproto.string_field(1)


@dataclass
class QueryDenomMetadataResponse(betterproto.Message):
    """
    QueryDenomMetadataResponse is the response type for the Query/DenomMetadata
    RPC method.
    """

    # metadata describes and provides all the client information for the
    # requested token.
    metadata: "Metadata" = betterproto.message_field(1)


@dataclass
class QueryDenomMetadataByQueryStringRequest(betterproto.Message):
    """
    QueryDenomMetadataByQueryStringRequest is the request type for the
    Query/DenomMetadata RPC method. Identical with QueryDenomMetadataRequest
    but receives denom as query string.
    """

    # denom is the coin denom to query the metadata for.
    denom: str = betterproto.string_field(1)


@dataclass
class QueryDenomMetadataByQueryStringResponse(betterproto.Message):
    """
    QueryDenomMetadataByQueryStringResponse is the response type for the
    Query/DenomMetadata RPC method. Identical with QueryDenomMetadataResponse
    but receives denom as query string in request.
    """

    # metadata describes and provides all the client information for the
    # requested token.
    metadata: "Metadata" = betterproto.message_field(1)


@dataclass
class QueryDenomOwnersRequest(betterproto.Message):
    """
    QueryDenomOwnersRequest defines the request type for the DenomOwners RPC
    query, which queries for a paginated set of all account holders of a
    particular denomination.
    """

    # denom defines the coin denomination to query all account holders for.
    denom: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class DenomOwner(betterproto.Message):
    """
    DenomOwner defines structure representing an account that owns or holds a
    particular denominated token. It contains the account address and account
    balance of the denominated token. Since: cosmos-sdk 0.46
    """

    # address defines the address that owns a particular denomination.
    address: str = betterproto.string_field(1)
    # balance is the balance of the denominated coin for an account.
    balance: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class QueryDenomOwnersResponse(betterproto.Message):
    """
    QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC
    query. Since: cosmos-sdk 0.46
    """

    denom_owners: List["DenomOwner"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDenomOwnersByQueryRequest(betterproto.Message):
    """
    QueryDenomOwnersByQueryRequest defines the request type for the
    DenomOwnersByQuery RPC query, which queries for a paginated set of all
    account holders of a particular denomination. Since: cosmos-sdk 0.50.3
    """

    # denom defines the coin denomination to query all account holders for.
    denom: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryDenomOwnersByQueryResponse(betterproto.Message):
    """
    QueryDenomOwnersByQueryResponse defines the RPC response of a
    DenomOwnersByQuery RPC query. Since: cosmos-sdk 0.50.3
    """

    denom_owners: List["DenomOwner"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QuerySendEnabledRequest(betterproto.Message):
    """
    QuerySendEnabledRequest defines the RPC request for looking up SendEnabled
    entries. Since: cosmos-sdk 0.47
    """

    # denoms is the specific denoms you want look up. Leave empty to get all
    # entries.
    denoms: List[str] = betterproto.string_field(1)
    # pagination defines an optional pagination for the request. This field is
    # only read if the denoms field is empty.
    pagination: v1beta1.PageRequest = betterproto.message_field(99)


@dataclass
class QuerySendEnabledResponse(betterproto.Message):
    """
    QuerySendEnabledResponse defines the RPC response of a SendEnable query.
    Since: cosmos-sdk 0.47
    """

    send_enabled: List["SendEnabled"] = betterproto.message_field(1)
    # pagination defines the pagination in the response. This field is only
    # populated if the denoms field in the request is empty.
    pagination: v1beta1.PageResponse = betterproto.message_field(99)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the bank Msg service."""

    async def send(
        self,
        *,
        from_address: str = "",
        to_address: str = "",
        amount: List[v1beta1.Coin] = [],
    ) -> MsgSendResponse:
        """
        Send defines a method for sending coins from one account to another
        account.
        """

        request = MsgSend()
        request.from_address = from_address
        request.to_address = to_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/Send",
            request,
            MsgSendResponse,
        )

    async def multi_send(
        self, *, inputs: List["Input"] = [], outputs: List["Output"] = []
    ) -> MsgMultiSendResponse:
        """
        MultiSend defines a method for sending coins from some accounts to
        other accounts.
        """

        request = MsgMultiSend()
        if inputs is not None:
            request.inputs = inputs
        if outputs is not None:
            request.outputs = outputs

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/MultiSend",
            request,
            MsgMultiSendResponse,
        )

    async def update_params(
        self, *, authority: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateParams defines a governance operation for updating the x/bank
        module parameters. The authority is defined in the keeper. Since:
        cosmos-sdk 0.47
        """

        request = MsgUpdateParams()
        request.authority = authority
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )

    async def set_send_enabled(
        self,
        *,
        authority: str = "",
        send_enabled: List["SendEnabled"] = [],
        use_default_for: List[str] = [],
    ) -> MsgSetSendEnabledResponse:
        """
        SetSendEnabled is a governance operation for setting the SendEnabled
        flag on any number of Denoms. Only the entries to add or update should
        be included. Entries that already exist in the store, but that aren't
        included in this message, will be left unchanged. Since: cosmos-sdk
        0.47
        """

        request = MsgSetSendEnabled()
        request.authority = authority
        if send_enabled is not None:
            request.send_enabled = send_enabled
        request.use_default_for = use_default_for

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Msg/SetSendEnabled",
            request,
            MsgSetSendEnabledResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def balance(
        self, *, address: str = "", denom: str = ""
    ) -> QueryBalanceResponse:
        """
        Balance queries the balance of a single coin for a single account.
        """

        request = QueryBalanceRequest()
        request.address = address
        request.denom = denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/Balance",
            request,
            QueryBalanceResponse,
        )

    async def all_balances(
        self,
        *,
        address: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
        resolve_denom: bool = False,
    ) -> QueryAllBalancesResponse:
        """
        AllBalances queries the balance of all coins for a single account. When
        called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        request = QueryAllBalancesRequest()
        request.address = address
        if pagination is not None:
            request.pagination = pagination
        request.resolve_denom = resolve_denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/AllBalances",
            request,
            QueryAllBalancesResponse,
        )

    async def spendable_balances(
        self, *, address: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QuerySpendableBalancesResponse:
        """
        SpendableBalances queries the spendable balance of all coins for a
        single account. When called from another module, this query might
        consume a high amount of gas if the pagination field is incorrectly
        set. Since: cosmos-sdk 0.46
        """

        request = QuerySpendableBalancesRequest()
        request.address = address
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalances",
            request,
            QuerySpendableBalancesResponse,
        )

    async def spendable_balance_by_denom(
        self, *, address: str = "", denom: str = ""
    ) -> QuerySpendableBalanceByDenomResponse:
        """
        SpendableBalanceByDenom queries the spendable balance of a single denom
        for a single account. When called from another module, this query might
        consume a high amount of gas if the pagination field is incorrectly
        set. Since: cosmos-sdk 0.47
        """

        request = QuerySpendableBalanceByDenomRequest()
        request.address = address
        request.denom = denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
            request,
            QuerySpendableBalanceByDenomResponse,
        )

    async def total_supply(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryTotalSupplyResponse:
        """
        TotalSupply queries the total supply of all coins. When called from
        another module, this query might consume a high amount of gas if the
        pagination field is incorrectly set.
        """

        request = QueryTotalSupplyRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/TotalSupply",
            request,
            QueryTotalSupplyResponse,
        )

    async def supply_of(self, *, denom: str = "") -> QuerySupplyOfResponse:
        """
        SupplyOf queries the supply of a single coin. When called from another
        module, this query might consume a high amount of gas if the pagination
        field is incorrectly set.
        """

        request = QuerySupplyOfRequest()
        request.denom = denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SupplyOf",
            request,
            QuerySupplyOfResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries the parameters of x/bank module."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )

    async def denom_metadata(self, *, denom: str = "") -> QueryDenomMetadataResponse:
        """
        DenomMetadata queries the client metadata of a given coin denomination.
        """

        request = QueryDenomMetadataRequest()
        request.denom = denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadata",
            request,
            QueryDenomMetadataResponse,
        )

    async def denom_metadata_by_query_string(
        self, *, denom: str = ""
    ) -> QueryDenomMetadataByQueryStringResponse:
        """
        DenomMetadataByQueryString queries the client metadata of a given coin
        denomination.
        """

        request = QueryDenomMetadataByQueryStringRequest()
        request.denom = denom

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomMetadataByQueryString",
            request,
            QueryDenomMetadataByQueryStringResponse,
        )

    async def denoms_metadata(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryDenomsMetadataResponse:
        """
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
        """

        request = QueryDenomsMetadataRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomsMetadata",
            request,
            QueryDenomsMetadataResponse,
        )

    async def denom_owners(
        self, *, denom: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryDenomOwnersResponse:
        """
        DenomOwners queries for all account addresses that own a particular
        token denomination. When called from another module, this query might
        consume a high amount of gas if the pagination field is incorrectly
        set. Since: cosmos-sdk 0.46
        """

        request = QueryDenomOwnersRequest()
        request.denom = denom
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwners",
            request,
            QueryDenomOwnersResponse,
        )

    async def denom_owners_by_query(
        self, *, denom: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryDenomOwnersByQueryResponse:
        """
        DenomOwnersByQuery queries for all account addresses that own a
        particular token denomination. Since: cosmos-sdk 0.50.3
        """

        request = QueryDenomOwnersByQueryRequest()
        request.denom = denom
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/DenomOwnersByQuery",
            request,
            QueryDenomOwnersByQueryResponse,
        )

    async def send_enabled(
        self,
        *,
        denoms: List[str] = [],
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QuerySendEnabledResponse:
        """
        SendEnabled queries for SendEnabled entries. This query only returns
        denominations that have specific SendEnabled settings. Any denomination
        that does not have a specific setting will use the default
        params.default_send_enabled, and will not be returned by this query.
        Since: cosmos-sdk 0.47
        """

        request = QuerySendEnabledRequest()
        request.denoms = denoms
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.bank.v1beta1.Query/SendEnabled",
            request,
            QuerySendEnabledResponse,
        )
