# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/gov/v1/gov.proto, cosmos/gov/v1/tx.proto, cosmos/gov/v1/genesis.proto, cosmos/gov/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1
from .google import protobuf


class VoteOption(betterproto.Enum):
    """
    VoteOption enumerates the valid vote options for a given governance
    proposal.
    """

    # VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
    VOTE_OPTION_UNSPECIFIED = 0
    # VOTE_OPTION_YES defines a yes vote option.
    VOTE_OPTION_YES = 1
    # VOTE_OPTION_ABSTAIN defines an abstain vote option.
    VOTE_OPTION_ABSTAIN = 2
    # VOTE_OPTION_NO defines a no vote option.
    VOTE_OPTION_NO = 3
    # VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    VOTE_OPTION_NO_WITH_VETO = 4


class ProposalStatus(betterproto.Enum):
    """ProposalStatus enumerates the valid statuses of a proposal."""

    # PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
    PROPOSAL_STATUS_UNSPECIFIED = 0
    # PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
    # period.
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1
    # PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
    # period.
    PROPOSAL_STATUS_VOTING_PERIOD = 2
    # PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
    # passed.
    PROPOSAL_STATUS_PASSED = 3
    # PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
    # been rejected.
    PROPOSAL_STATUS_REJECTED = 4
    # PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
    # failed.
    PROPOSAL_STATUS_FAILED = 5


@dataclass
class WeightedVoteOption(betterproto.Message):
    """WeightedVoteOption defines a unit of vote for vote split."""

    # option defines the valid vote options, it must not contain duplicate vote
    # options.
    option: "VoteOption" = betterproto.enum_field(1)
    # weight is the vote weight associated with the vote option.
    weight: str = betterproto.string_field(2)


@dataclass
class Deposit(betterproto.Message):
    """
    Deposit defines an amount deposited by an account address to an active
    proposal.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # depositor defines the deposit addresses from the proposals.
    depositor: str = betterproto.string_field(2)
    # amount to be deposited by depositor.
    amount: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class Proposal(betterproto.Message):
    """Proposal defines the core field members of a governance proposal."""

    # id defines the unique id of the proposal.
    id: int = betterproto.uint64_field(1)
    # messages are the arbitrary messages to be executed if the proposal passes.
    messages: List[protobuf.Any] = betterproto.message_field(2)
    # status defines the proposal status.
    status: "ProposalStatus" = betterproto.enum_field(3)
    # final_tally_result is the final tally result of the proposal. When querying
    # a proposal via gRPC, this field is not populated until the proposal's
    # voting period has ended.
    final_tally_result: "TallyResult" = betterproto.message_field(4)
    # submit_time is the time of proposal submission.
    submit_time: datetime = betterproto.message_field(5)
    # deposit_end_time is the end time for deposition.
    deposit_end_time: datetime = betterproto.message_field(6)
    # total_deposit is the total deposit on the proposal.
    total_deposit: List[v1beta1.Coin] = betterproto.message_field(7)
    # voting_start_time is the starting time to vote on a proposal.
    voting_start_time: datetime = betterproto.message_field(8)
    # voting_end_time is the end time of voting on a proposal.
    voting_end_time: datetime = betterproto.message_field(9)
    # metadata is any arbitrary metadata attached to the proposal. the
    # recommended format of the metadata is to be found here:
    # https://docs.cosmos.network/v0.47/modules/gov#proposal-3
    metadata: str = betterproto.string_field(10)
    # title is the title of the proposal Since: cosmos-sdk 0.47
    title: str = betterproto.string_field(11)
    # summary is a short summary of the proposal Since: cosmos-sdk 0.47
    summary: str = betterproto.string_field(12)
    # proposer is the address of the proposal sumbitter Since: cosmos-sdk 0.47
    proposer: str = betterproto.string_field(13)
    # expedited defines if the proposal is expedited Since: cosmos-sdk 0.50
    expedited: bool = betterproto.bool_field(14)
    # failed_reason defines the reason why the proposal failed Since: cosmos-sdk
    # 0.50
    failed_reason: str = betterproto.string_field(15)


@dataclass
class TallyResult(betterproto.Message):
    """TallyResult defines a standard tally for a governance proposal."""

    # yes_count is the number of yes votes on a proposal.
    yes_count: str = betterproto.string_field(1)
    # abstain_count is the number of abstain votes on a proposal.
    abstain_count: str = betterproto.string_field(2)
    # no_count is the number of no votes on a proposal.
    no_count: str = betterproto.string_field(3)
    # no_with_veto_count is the number of no with veto votes on a proposal.
    no_with_veto_count: str = betterproto.string_field(4)


@dataclass
class Vote(betterproto.Message):
    """
    Vote defines a vote on a governance proposal. A Vote consists of a proposal
    ID, the voter, and the vote option.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # voter is the voter address of the proposal.
    voter: str = betterproto.string_field(2)
    # options is the weighted vote options.
    options: List["WeightedVoteOption"] = betterproto.message_field(4)
    # metadata is any arbitrary metadata attached to the vote. the recommended
    # format of the metadata is to be found here:
    # https://docs.cosmos.network/v0.47/modules/gov#vote-5
    metadata: str = betterproto.string_field(5)


@dataclass
class DepositParams(betterproto.Message):
    """
    DepositParams defines the params for deposits on governance proposals.
    """

    # Minimum deposit for a proposal to enter voting period.
    min_deposit: List[v1beta1.Coin] = betterproto.message_field(1)
    # Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    # months.
    max_deposit_period: timedelta = betterproto.message_field(2)


@dataclass
class VotingParams(betterproto.Message):
    """VotingParams defines the params for voting on governance proposals."""

    # Duration of the voting period.
    voting_period: timedelta = betterproto.message_field(1)


@dataclass
class TallyParams(betterproto.Message):
    """
    TallyParams defines the params for tallying votes on governance proposals.
    """

    # Minimum percentage of total stake needed to vote for a result to be
    # considered valid.
    quorum: str = betterproto.string_field(1)
    # Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    threshold: str = betterproto.string_field(2)
    # Minimum value of Veto votes to Total votes ratio for proposal to be vetoed.
    # Default value: 1/3.
    veto_threshold: str = betterproto.string_field(3)


@dataclass
class Params(betterproto.Message):
    """
    Params defines the parameters for the x/gov module. Since: cosmos-sdk 0.47
    """

    # Minimum deposit for a proposal to enter voting period.
    min_deposit: List[v1beta1.Coin] = betterproto.message_field(1)
    # Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    # months.
    max_deposit_period: timedelta = betterproto.message_field(2)
    # Duration of the voting period.
    voting_period: timedelta = betterproto.message_field(3)
    # Minimum percentage of total stake needed to vote for a result to be
    # considered valid.
    quorum: str = betterproto.string_field(4)
    # Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    threshold: str = betterproto.string_field(5)
    # Minimum value of Veto votes to Total votes ratio for proposal to be
    # vetoed. Default value: 1/3.
    veto_threshold: str = betterproto.string_field(6)
    # The ratio representing the proportion of the deposit value that must be
    # paid at proposal submission.
    min_initial_deposit_ratio: str = betterproto.string_field(7)
    # The cancel ratio which will not be returned back to the depositors when a
    # proposal is cancelled. Since: cosmos-sdk 0.50
    proposal_cancel_ratio: str = betterproto.string_field(8)
    # The address which will receive (proposal_cancel_ratio * deposit) proposal
    # deposits. If empty, the (proposal_cancel_ratio * deposit) proposal deposits
    # will be burned. Since: cosmos-sdk 0.50
    proposal_cancel_dest: str = betterproto.string_field(9)
    # Duration of the voting period of an expedited proposal. Since: cosmos-sdk
    # 0.50
    expedited_voting_period: timedelta = betterproto.message_field(10)
    # Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
    # Since: cosmos-sdk 0.50
    expedited_threshold: str = betterproto.string_field(11)
    # Minimum expedited deposit for a proposal to enter voting period.
    expedited_min_deposit: List[v1beta1.Coin] = betterproto.message_field(12)
    # burn deposits if a proposal does not meet quorum
    burn_vote_quorum: bool = betterproto.bool_field(13)
    # burn deposits if the proposal does not enter voting period
    burn_proposal_deposit_prevote: bool = betterproto.bool_field(14)
    # burn deposits if quorum with vote type no_veto is met
    burn_vote_veto: bool = betterproto.bool_field(15)
    # The ratio representing the proportion of the deposit value minimum that
    # must be met when making a deposit. Default value: 0.01. Meaning that for a
    # chain with a min_deposit of 100stake, a deposit of 1stake would be
    # required. Since: cosmos-sdk 0.50
    min_deposit_ratio: str = betterproto.string_field(16)


@dataclass
class MsgSubmitProposal(betterproto.Message):
    """
    MsgSubmitProposal defines an sdk.Msg type that supports submitting
    arbitrary proposal Content.
    """

    # messages are the arbitrary messages to be executed if proposal passes.
    messages: List[protobuf.Any] = betterproto.message_field(1)
    # initial_deposit is the deposit value that must be paid at proposal
    # submission.
    initial_deposit: List[v1beta1.Coin] = betterproto.message_field(2)
    # proposer is the account address of the proposer.
    proposer: str = betterproto.string_field(3)
    # metadata is any arbitrary metadata attached to the proposal.
    metadata: str = betterproto.string_field(4)
    # title is the title of the proposal. Since: cosmos-sdk 0.47
    title: str = betterproto.string_field(5)
    # summary is the summary of the proposal Since: cosmos-sdk 0.47
    summary: str = betterproto.string_field(6)
    # expedited defines if the proposal is expedited or not Since: cosmos-sdk
    # 0.50
    expedited: bool = betterproto.bool_field(7)


@dataclass
class MsgSubmitProposalResponse(betterproto.Message):
    """
    MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)


@dataclass
class MsgExecLegacyContent(betterproto.Message):
    """
    MsgExecLegacyContent is used to wrap the legacy content field into a
    message. This ensures backwards compatibility with
    v1beta1.MsgSubmitProposal.
    """

    # content is the proposal's content.
    content: protobuf.Any = betterproto.message_field(1)
    # authority must be the gov module address.
    authority: str = betterproto.string_field(2)


@dataclass
class MsgExecLegacyContentResponse(betterproto.Message):
    """
    MsgExecLegacyContentResponse defines the Msg/ExecLegacyContent response
    type.
    """

    pass


@dataclass
class MsgVote(betterproto.Message):
    """MsgVote defines a message to cast a vote."""

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # voter is the voter address for the proposal.
    voter: str = betterproto.string_field(2)
    # option defines the vote option.
    option: "VoteOption" = betterproto.enum_field(3)
    # metadata is any arbitrary metadata attached to the Vote.
    metadata: str = betterproto.string_field(4)


@dataclass
class MsgVoteResponse(betterproto.Message):
    """MsgVoteResponse defines the Msg/Vote response type."""

    pass


@dataclass
class MsgVoteWeighted(betterproto.Message):
    """MsgVoteWeighted defines a message to cast a vote."""

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # voter is the voter address for the proposal.
    voter: str = betterproto.string_field(2)
    # options defines the weighted vote options.
    options: List["WeightedVoteOption"] = betterproto.message_field(3)
    # metadata is any arbitrary metadata attached to the VoteWeighted.
    metadata: str = betterproto.string_field(4)


@dataclass
class MsgVoteWeightedResponse(betterproto.Message):
    """MsgVoteWeightedResponse defines the Msg/VoteWeighted response type."""

    pass


@dataclass
class MsgDeposit(betterproto.Message):
    """
    MsgDeposit defines a message to submit a deposit to an existing proposal.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # depositor defines the deposit addresses from the proposals.
    depositor: str = betterproto.string_field(2)
    # amount to be deposited by depositor.
    amount: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class MsgDepositResponse(betterproto.Message):
    """MsgDepositResponse defines the Msg/Deposit response type."""

    pass


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)
    # params defines the x/gov parameters to update. NOTE: All parameters must be
    # supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class MsgCancelProposal(betterproto.Message):
    """
    MsgCancelProposal is the Msg/CancelProposal request type. Since: cosmos-sdk
    0.50
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # proposer is the account address of the proposer.
    proposer: str = betterproto.string_field(2)


@dataclass
class MsgCancelProposalResponse(betterproto.Message):
    """
    MsgCancelProposalResponse defines the response structure for executing a
    MsgCancelProposal message. Since: cosmos-sdk 0.50
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # canceled_time is the time when proposal is canceled.
    canceled_time: datetime = betterproto.message_field(2)
    # canceled_height defines the block height at which the proposal is canceled.
    canceled_height: int = betterproto.uint64_field(3)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the gov module's genesis state."""

    # starting_proposal_id is the ID of the starting proposal.
    starting_proposal_id: int = betterproto.uint64_field(1)
    # deposits defines all the deposits present at genesis.
    deposits: List["Deposit"] = betterproto.message_field(2)
    # votes defines all the votes present at genesis.
    votes: List["Vote"] = betterproto.message_field(3)
    # proposals defines all the proposals present at genesis.
    proposals: List["Proposal"] = betterproto.message_field(4)
    # Deprecated: Prefer to use `params` instead. deposit_params defines all the
    # paramaters of related to deposit.
    deposit_params: "DepositParams" = betterproto.message_field(5)
    # Deprecated: Prefer to use `params` instead. voting_params defines all the
    # paramaters of related to voting.
    voting_params: "VotingParams" = betterproto.message_field(6)
    # Deprecated: Prefer to use `params` instead. tally_params defines all the
    # paramaters of related to tally.
    tally_params: "TallyParams" = betterproto.message_field(7)
    # params defines all the paramaters of x/gov module. Since: cosmos-sdk 0.47
    params: "Params" = betterproto.message_field(8)
    # The constitution allows builders to lay a foundation and define purpose.
    # This is an immutable string set in genesis. There are no amendments, to go
    # outside of scope, just fork. constitution is an immutable string in genesis
    # for a chain builder to lay out their vision, ideas and ideals. Since:
    # cosmos-sdk 0.50
    constitution: str = betterproto.string_field(9)


@dataclass
class QueryConstitutionRequest(betterproto.Message):
    """
    QueryConstitutionRequest is the request type for the Query/Constitution RPC
    method
    """

    pass


@dataclass
class QueryConstitutionResponse(betterproto.Message):
    """
    QueryConstitutionResponse is the response type for the Query/Constitution
    RPC method
    """

    constitution: str = betterproto.string_field(1)


@dataclass
class QueryProposalRequest(betterproto.Message):
    """
    QueryProposalRequest is the request type for the Query/Proposal RPC method.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)


@dataclass
class QueryProposalResponse(betterproto.Message):
    """
    QueryProposalResponse is the response type for the Query/Proposal RPC
    method.
    """

    # proposal is the requested governance proposal.
    proposal: "Proposal" = betterproto.message_field(1)


@dataclass
class QueryProposalsRequest(betterproto.Message):
    """
    QueryProposalsRequest is the request type for the Query/Proposals RPC
    method.
    """

    # proposal_status defines the status of the proposals.
    proposal_status: "ProposalStatus" = betterproto.enum_field(1)
    # voter defines the voter address for the proposals.
    voter: str = betterproto.string_field(2)
    # depositor defines the deposit addresses from the proposals.
    depositor: str = betterproto.string_field(3)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(4)


@dataclass
class QueryProposalsResponse(betterproto.Message):
    """
    QueryProposalsResponse is the response type for the Query/Proposals RPC
    method.
    """

    # proposals defines all the requested governance proposals.
    proposals: List["Proposal"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryVoteRequest(betterproto.Message):
    """QueryVoteRequest is the request type for the Query/Vote RPC method."""

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # voter defines the voter address for the proposals.
    voter: str = betterproto.string_field(2)


@dataclass
class QueryVoteResponse(betterproto.Message):
    """
    QueryVoteResponse is the response type for the Query/Vote RPC method.
    """

    # vote defines the queried vote.
    vote: "Vote" = betterproto.message_field(1)


@dataclass
class QueryVotesRequest(betterproto.Message):
    """
    QueryVotesRequest is the request type for the Query/Votes RPC method.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryVotesResponse(betterproto.Message):
    """
    QueryVotesResponse is the response type for the Query/Votes RPC method.
    """

    # votes defines the queried votes.
    votes: List["Vote"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    # params_type defines which parameters to query for, can be one of "voting",
    # "tallying" or "deposit".
    params_type: str = betterproto.string_field(1)


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # Deprecated: Prefer to use `params` instead. voting_params defines the
    # parameters related to voting.
    voting_params: "VotingParams" = betterproto.message_field(1)
    # Deprecated: Prefer to use `params` instead. deposit_params defines the
    # parameters related to deposit.
    deposit_params: "DepositParams" = betterproto.message_field(2)
    # Deprecated: Prefer to use `params` instead. tally_params defines the
    # parameters related to tally.
    tally_params: "TallyParams" = betterproto.message_field(3)
    # params defines all the paramaters of x/gov module. Since: cosmos-sdk 0.47
    params: "Params" = betterproto.message_field(4)


@dataclass
class QueryDepositRequest(betterproto.Message):
    """
    QueryDepositRequest is the request type for the Query/Deposit RPC method.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # depositor defines the deposit addresses from the proposals.
    depositor: str = betterproto.string_field(2)


@dataclass
class QueryDepositResponse(betterproto.Message):
    """
    QueryDepositResponse is the response type for the Query/Deposit RPC method.
    """

    # deposit defines the requested deposit.
    deposit: "Deposit" = betterproto.message_field(1)


@dataclass
class QueryDepositsRequest(betterproto.Message):
    """
    QueryDepositsRequest is the request type for the Query/Deposits RPC method.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryDepositsResponse(betterproto.Message):
    """
    QueryDepositsResponse is the response type for the Query/Deposits RPC
    method.
    """

    # deposits defines the requested deposits.
    deposits: List["Deposit"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryTallyResultRequest(betterproto.Message):
    """
    QueryTallyResultRequest is the request type for the Query/Tally RPC method.
    """

    # proposal_id defines the unique id of the proposal.
    proposal_id: int = betterproto.uint64_field(1)


@dataclass
class QueryTallyResultResponse(betterproto.Message):
    """
    QueryTallyResultResponse is the response type for the Query/Tally RPC
    method.
    """

    # tally defines the requested tally.
    tally: "TallyResult" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the gov Msg service."""

    async def submit_proposal(
        self,
        *,
        messages: List[protobuf.Any] = [],
        initial_deposit: List[v1beta1.Coin] = [],
        proposer: str = "",
        metadata: str = "",
        title: str = "",
        summary: str = "",
        expedited: bool = False,
    ) -> MsgSubmitProposalResponse:
        """
        SubmitProposal defines a method to create new proposal given the
        messages.
        """

        request = MsgSubmitProposal()
        if messages is not None:
            request.messages = messages
        if initial_deposit is not None:
            request.initial_deposit = initial_deposit
        request.proposer = proposer
        request.metadata = metadata
        request.title = title
        request.summary = summary
        request.expedited = expedited

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/SubmitProposal",
            request,
            MsgSubmitProposalResponse,
        )

    async def exec_legacy_content(
        self, *, content: Optional[protobuf.Any] = None, authority: str = ""
    ) -> MsgExecLegacyContentResponse:
        """
        ExecLegacyContent defines a Msg to be in included in a
        MsgSubmitProposal to execute a legacy content-based proposal.
        """

        request = MsgExecLegacyContent()
        if content is not None:
            request.content = content
        request.authority = authority

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/ExecLegacyContent",
            request,
            MsgExecLegacyContentResponse,
        )

    async def vote(
        self,
        *,
        proposal_id: int = 0,
        voter: str = "",
        option: "VoteOption" = 0,
        metadata: str = "",
    ) -> MsgVoteResponse:
        """Vote defines a method to add a vote on a specific proposal."""

        request = MsgVote()
        request.proposal_id = proposal_id
        request.voter = voter
        request.option = option
        request.metadata = metadata

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/Vote",
            request,
            MsgVoteResponse,
        )

    async def vote_weighted(
        self,
        *,
        proposal_id: int = 0,
        voter: str = "",
        options: List["WeightedVoteOption"] = [],
        metadata: str = "",
    ) -> MsgVoteWeightedResponse:
        """
        VoteWeighted defines a method to add a weighted vote on a specific
        proposal.
        """

        request = MsgVoteWeighted()
        request.proposal_id = proposal_id
        request.voter = voter
        if options is not None:
            request.options = options
        request.metadata = metadata

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/VoteWeighted",
            request,
            MsgVoteWeightedResponse,
        )

    async def deposit(
        self,
        *,
        proposal_id: int = 0,
        depositor: str = "",
        amount: List[v1beta1.Coin] = [],
    ) -> MsgDepositResponse:
        """Deposit defines a method to add deposit on a specific proposal."""

        request = MsgDeposit()
        request.proposal_id = proposal_id
        request.depositor = depositor
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/Deposit",
            request,
            MsgDepositResponse,
        )

    async def update_params(
        self, *, authority: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateParams defines a governance operation for updating the x/gov
        module parameters. The authority is defined in the keeper. Since:
        cosmos-sdk 0.47
        """

        request = MsgUpdateParams()
        request.authority = authority
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )

    async def cancel_proposal(
        self, *, proposal_id: int = 0, proposer: str = ""
    ) -> MsgCancelProposalResponse:
        """
        CancelProposal defines a method to cancel governance proposal Since:
        cosmos-sdk 0.50
        """

        request = MsgCancelProposal()
        request.proposal_id = proposal_id
        request.proposer = proposer

        return await self._unary_unary(
            "/cosmos.gov.v1.Msg/CancelProposal",
            request,
            MsgCancelProposalResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service for gov module"""

    async def constitution(self) -> QueryConstitutionResponse:
        """Constitution queries the chain's constitution."""

        request = QueryConstitutionRequest()

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Constitution",
            request,
            QueryConstitutionResponse,
        )

    async def proposal(self, *, proposal_id: int = 0) -> QueryProposalResponse:
        """Proposal queries proposal details based on ProposalID."""

        request = QueryProposalRequest()
        request.proposal_id = proposal_id

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Proposal",
            request,
            QueryProposalResponse,
        )

    async def proposals(
        self,
        *,
        proposal_status: "ProposalStatus" = 0,
        voter: str = "",
        depositor: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryProposalsResponse:
        """Proposals queries all proposals based on given status."""

        request = QueryProposalsRequest()
        request.proposal_status = proposal_status
        request.voter = voter
        request.depositor = depositor
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Proposals",
            request,
            QueryProposalsResponse,
        )

    async def vote(self, *, proposal_id: int = 0, voter: str = "") -> QueryVoteResponse:
        """Vote queries voted information based on proposalID, voterAddr."""

        request = QueryVoteRequest()
        request.proposal_id = proposal_id
        request.voter = voter

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Vote",
            request,
            QueryVoteResponse,
        )

    async def votes(
        self, *, proposal_id: int = 0, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryVotesResponse:
        """Votes queries votes of a given proposal."""

        request = QueryVotesRequest()
        request.proposal_id = proposal_id
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Votes",
            request,
            QueryVotesResponse,
        )

    async def params(self, *, params_type: str = "") -> QueryParamsResponse:
        """Params queries all parameters of the gov module."""

        request = QueryParamsRequest()
        request.params_type = params_type

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Params",
            request,
            QueryParamsResponse,
        )

    async def deposit(
        self, *, proposal_id: int = 0, depositor: str = ""
    ) -> QueryDepositResponse:
        """
        Deposit queries single deposit information based on proposalID,
        depositAddr.
        """

        request = QueryDepositRequest()
        request.proposal_id = proposal_id
        request.depositor = depositor

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Deposit",
            request,
            QueryDepositResponse,
        )

    async def deposits(
        self, *, proposal_id: int = 0, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryDepositsResponse:
        """Deposits queries all deposits of a single proposal."""

        request = QueryDepositsRequest()
        request.proposal_id = proposal_id
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/Deposits",
            request,
            QueryDepositsResponse,
        )

    async def tally_result(self, *, proposal_id: int = 0) -> QueryTallyResultResponse:
        """TallyResult queries the tally of a proposal vote."""

        request = QueryTallyResultRequest()
        request.proposal_id = proposal_id

        return await self._unary_unary(
            "/cosmos.gov.v1.Query/TallyResult",
            request,
            QueryTallyResultResponse,
        )
