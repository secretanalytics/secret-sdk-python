# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/auth/v1beta1/auth.proto, cosmos/auth/v1beta1/tx.proto, cosmos/auth/v1beta1/genesis.proto, cosmos/auth/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base.query import v1beta1
from .google import protobuf


@dataclass
class BaseAccount(betterproto.Message):
    """
    BaseAccount defines a base account type. It contains all the necessary
    fields for basic account functionality. Any custom account type should
    extend this type for additional functionality (e.g. vesting).
    """

    address: str = betterproto.string_field(1)
    pub_key: protobuf.Any = betterproto.message_field(2)
    account_number: int = betterproto.uint64_field(3)
    sequence: int = betterproto.uint64_field(4)


@dataclass
class ModuleAccount(betterproto.Message):
    """
    ModuleAccount defines an account for modules that holds coins on a pool.
    """

    base_account: "BaseAccount" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)
    permissions: List[str] = betterproto.string_field(3)


@dataclass
class ModuleCredential(betterproto.Message):
    """
    ModuleCredential represents a unclaimable pubkey for base accounts
    controlled by modules. Since: cosmos-sdk 0.47
    """

    # module_name is the name of the module used for address derivation (passed
    # into address.Module).
    module_name: str = betterproto.string_field(1)
    # derivation_keys is for deriving a module account address (passed into
    # address.Module) adding more keys creates sub-account addresses (passed into
    # address.Derive)
    derivation_keys: List[bytes] = betterproto.bytes_field(2)


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the auth module."""

    max_memo_characters: int = betterproto.uint64_field(1)
    tx_sig_limit: int = betterproto.uint64_field(2)
    tx_size_cost_per_byte: int = betterproto.uint64_field(3)
    sig_verify_cost_ed25519: int = betterproto.uint64_field(4)
    sig_verify_cost_secp256k1: int = betterproto.uint64_field(5)


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)
    # params defines the x/auth parameters to update. NOTE: All parameters must
    # be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the auth module's genesis state."""

    # params defines all the parameters of the module.
    params: "Params" = betterproto.message_field(1)
    # accounts are the accounts present at genesis.
    accounts: List[protobuf.Any] = betterproto.message_field(2)


@dataclass
class QueryAccountsRequest(betterproto.Message):
    """
    QueryAccountsRequest is the request type for the Query/Accounts RPC method.
    Since: cosmos-sdk 0.43
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryAccountsResponse(betterproto.Message):
    """
    QueryAccountsResponse is the response type for the Query/Accounts RPC
    method. Since: cosmos-sdk 0.43
    """

    # accounts are the existing accounts
    accounts: List[protobuf.Any] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryAccountRequest(betterproto.Message):
    """
    QueryAccountRequest is the request type for the Query/Account RPC method.
    """

    # address defines the address to query for.
    address: str = betterproto.string_field(1)


@dataclass
class QueryAccountResponse(betterproto.Message):
    """
    QueryAccountResponse is the response type for the Query/Account RPC method.
    """

    # account defines the account of the corresponding address.
    account: protobuf.Any = betterproto.message_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryModuleAccountsRequest(betterproto.Message):
    """
    QueryModuleAccountsRequest is the request type for the Query/ModuleAccounts
    RPC method. Since: cosmos-sdk 0.46
    """

    pass


@dataclass
class QueryModuleAccountsResponse(betterproto.Message):
    """
    QueryModuleAccountsResponse is the response type for the
    Query/ModuleAccounts RPC method. Since: cosmos-sdk 0.46
    """

    accounts: List[protobuf.Any] = betterproto.message_field(1)


@dataclass
class QueryModuleAccountByNameRequest(betterproto.Message):
    """
    QueryModuleAccountByNameRequest is the request type for the
    Query/ModuleAccountByName RPC method.
    """

    name: str = betterproto.string_field(1)


@dataclass
class QueryModuleAccountByNameResponse(betterproto.Message):
    """
    QueryModuleAccountByNameResponse is the response type for the
    Query/ModuleAccountByName RPC method.
    """

    account: protobuf.Any = betterproto.message_field(1)


@dataclass
class Bech32PrefixRequest(betterproto.Message):
    """
    Bech32PrefixRequest is the request type for Bech32Prefix rpc method. Since:
    cosmos-sdk 0.46
    """

    pass


@dataclass
class Bech32PrefixResponse(betterproto.Message):
    """
    Bech32PrefixResponse is the response type for Bech32Prefix rpc method.
    Since: cosmos-sdk 0.46
    """

    bech32_prefix: str = betterproto.string_field(1)


@dataclass
class AddressBytesToStringRequest(betterproto.Message):
    """
    AddressBytesToStringRequest is the request type for AddressString rpc
    method. Since: cosmos-sdk 0.46
    """

    address_bytes: bytes = betterproto.bytes_field(1)


@dataclass
class AddressBytesToStringResponse(betterproto.Message):
    """
    AddressBytesToStringResponse is the response type for AddressString rpc
    method. Since: cosmos-sdk 0.46
    """

    address_string: str = betterproto.string_field(1)


@dataclass
class AddressStringToBytesRequest(betterproto.Message):
    """
    AddressStringToBytesRequest is the request type for AccountBytes rpc
    method. Since: cosmos-sdk 0.46
    """

    address_string: str = betterproto.string_field(1)


@dataclass
class AddressStringToBytesResponse(betterproto.Message):
    """
    AddressStringToBytesResponse is the response type for AddressBytes rpc
    method. Since: cosmos-sdk 0.46
    """

    address_bytes: bytes = betterproto.bytes_field(1)


@dataclass
class QueryAccountAddressByIDRequest(betterproto.Message):
    """
    QueryAccountAddressByIDRequest is the request type for AccountAddressByID
    rpc method Since: cosmos-sdk 0.46.2
    """

    # Deprecated, use account_id instead id is the account number of the address
    # to be queried. This field should have been an uint64 (like all account
    # numbers), and will be updated to uint64 in a future version of the auth
    # query.
    id: int = betterproto.int64_field(1)
    # account_id is the account number of the address to be queried. Since:
    # cosmos-sdk 0.47
    account_id: int = betterproto.uint64_field(2)


@dataclass
class QueryAccountAddressByIDResponse(betterproto.Message):
    """
    QueryAccountAddressByIDResponse is the response type for AccountAddressByID
    rpc method Since: cosmos-sdk 0.46.2
    """

    account_address: str = betterproto.string_field(1)


@dataclass
class QueryAccountInfoRequest(betterproto.Message):
    """
    QueryAccountInfoRequest is the Query/AccountInfo request type. Since:
    cosmos-sdk 0.47
    """

    # address is the account address string.
    address: str = betterproto.string_field(1)


@dataclass
class QueryAccountInfoResponse(betterproto.Message):
    """
    QueryAccountInfoResponse is the Query/AccountInfo response type. Since:
    cosmos-sdk 0.47
    """

    # info is the account info which is represented by BaseAccount.
    info: "BaseAccount" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the x/auth Msg service."""

    async def update_params(
        self, *, authority: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateParams defines a (governance) operation for updating the x/auth
        module parameters. The authority defaults to the x/gov module account.
        Since: cosmos-sdk 0.47
        """

        request = MsgUpdateParams()
        request.authority = authority
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def accounts(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryAccountsResponse:
        """
        Accounts returns all the existing accounts. When called from another
        module, this query might consume a high amount of gas if the pagination
        field is incorrectly set. Since: cosmos-sdk 0.43
        """

        request = QueryAccountsRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Accounts",
            request,
            QueryAccountsResponse,
        )

    async def account(self, *, address: str = "") -> QueryAccountResponse:
        """Account returns account details based on address."""

        request = QueryAccountRequest()
        request.address = address

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Account",
            request,
            QueryAccountResponse,
        )

    async def account_address_by_i_d(
        self, *, id: int = 0, account_id: int = 0
    ) -> QueryAccountAddressByIDResponse:
        """
        AccountAddressByID returns account address based on account number.
        Since: cosmos-sdk 0.46.2
        """

        request = QueryAccountAddressByIDRequest()
        request.id = id
        request.account_id = account_id

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountAddressByID",
            request,
            QueryAccountAddressByIDResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )

    async def module_accounts(self) -> QueryModuleAccountsResponse:
        """
        ModuleAccounts returns all the existing module accounts. Since: cosmos-
        sdk 0.46
        """

        request = QueryModuleAccountsRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccounts",
            request,
            QueryModuleAccountsResponse,
        )

    async def module_account_by_name(
        self, *, name: str = ""
    ) -> QueryModuleAccountByNameResponse:
        """
        ModuleAccountByName returns the module account info by module name
        """

        request = QueryModuleAccountByNameRequest()
        request.name = name

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/ModuleAccountByName",
            request,
            QueryModuleAccountByNameResponse,
        )

    async def bech32_prefix(self) -> Bech32PrefixResponse:
        """Bech32Prefix queries bech32Prefix Since: cosmos-sdk 0.46"""

        request = Bech32PrefixRequest()

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/Bech32Prefix",
            request,
            Bech32PrefixResponse,
        )

    async def address_bytes_to_string(
        self, *, address_bytes: bytes = b""
    ) -> AddressBytesToStringResponse:
        """
        AddressBytesToString converts Account Address bytes to string Since:
        cosmos-sdk 0.46
        """

        request = AddressBytesToStringRequest()
        request.address_bytes = address_bytes

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressBytesToString",
            request,
            AddressBytesToStringResponse,
        )

    async def address_string_to_bytes(
        self, *, address_string: str = ""
    ) -> AddressStringToBytesResponse:
        """
        AddressStringToBytes converts Address string to bytes Since: cosmos-sdk
        0.46
        """

        request = AddressStringToBytesRequest()
        request.address_string = address_string

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AddressStringToBytes",
            request,
            AddressStringToBytesResponse,
        )

    async def account_info(self, *, address: str = "") -> QueryAccountInfoResponse:
        """
        AccountInfo queries account info which is common to all account types.
        Since: cosmos-sdk 0.47
        """

        request = QueryAccountInfoRequest()
        request.address = address

        return await self._unary_unary(
            "/cosmos.auth.v1beta1.Query/AccountInfo",
            request,
            QueryAccountInfoResponse,
        )
