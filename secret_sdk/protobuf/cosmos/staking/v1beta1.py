# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/staking/v1beta1/staking.proto, cosmos/staking/v1beta1/tx.proto, cosmos/staking/v1beta1/authz.proto, cosmos/staking/v1beta1/genesis.proto, cosmos/staking/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1
from .google import protobuf
from .tendermint import abci
from .tendermint import types


class BondStatus(betterproto.Enum):
    """BondStatus is the status of a validator."""

    # UNSPECIFIED defines an invalid validator status.
    BOND_STATUS_UNSPECIFIED = 0
    # UNBONDED defines a validator that is not bonded.
    BOND_STATUS_UNBONDED = 1
    # UNBONDING defines a validator that is unbonding.
    BOND_STATUS_UNBONDING = 2
    # BONDED defines a validator that is bonded.
    BOND_STATUS_BONDED = 3


class Infraction(betterproto.Enum):
    """Infraction indicates the infraction a validator commited."""

    # UNSPECIFIED defines an empty infraction.
    INFRACTION_UNSPECIFIED = 0
    # DOUBLE_SIGN defines a validator that double-signs a block.
    INFRACTION_DOUBLE_SIGN = 1
    # DOWNTIME defines a validator that missed signing too many blocks.
    INFRACTION_DOWNTIME = 2


class AuthorizationType(betterproto.Enum):
    """
    AuthorizationType defines the type of staking module authorization type
    Since: cosmos-sdk 0.43
    """

    # AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
    AUTHORIZATION_TYPE_UNSPECIFIED = 0
    # AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
    AUTHORIZATION_TYPE_DELEGATE = 1
    # AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for
    # Msg/Undelegate
    AUTHORIZATION_TYPE_UNDELEGATE = 2
    # AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for
    # Msg/BeginRedelegate
    AUTHORIZATION_TYPE_REDELEGATE = 3
    # AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION defines an authorization
    # type for Msg/MsgCancelUnbondingDelegation
    AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION = 4


@dataclass
class HistoricalInfo(betterproto.Message):
    """
    HistoricalInfo contains header and validator information for a given block.
    It is stored as part of staking module's state, which persists the `n` most
    recent HistoricalInfo (`n` is set by the staking module's
    `historical_entries` parameter).
    """

    header: types.Header = betterproto.message_field(1)
    valset: List["Validator"] = betterproto.message_field(2)


@dataclass
class CommissionRates(betterproto.Message):
    """
    CommissionRates defines the initial commission rates to be used for
    creating a validator.
    """

    # rate is the commission rate charged to delegators, as a fraction.
    rate: str = betterproto.string_field(1)
    # max_rate defines the maximum commission rate which validator can ever
    # charge, as a fraction.
    max_rate: str = betterproto.string_field(2)
    # max_change_rate defines the maximum daily increase of the validator
    # commission, as a fraction.
    max_change_rate: str = betterproto.string_field(3)


@dataclass
class Commission(betterproto.Message):
    """Commission defines commission parameters for a given validator."""

    # commission_rates defines the initial commission rates to be used for
    # creating a validator.
    commission_rates: "CommissionRates" = betterproto.message_field(1)
    # update_time is the last time the commission rate was changed.
    update_time: datetime = betterproto.message_field(2)


@dataclass
class Description(betterproto.Message):
    """Description defines a validator description."""

    # moniker defines a human-readable name for the validator.
    moniker: str = betterproto.string_field(1)
    # identity defines an optional identity signature (ex. UPort or Keybase).
    identity: str = betterproto.string_field(2)
    # website defines an optional website link.
    website: str = betterproto.string_field(3)
    # security_contact defines an optional email for security contact.
    security_contact: str = betterproto.string_field(4)
    # details define other optional details.
    details: str = betterproto.string_field(5)


@dataclass
class Validator(betterproto.Message):
    """
    Validator defines a validator, together with the total amount of the
    Validator's bond shares and their exchange rate to coins. Slashing results
    in a decrease in the exchange rate, allowing correct calculation of future
    undelegations without iterating over delegators. When coins are delegated
    to this validator, the validator is credited with a delegation whose number
    of bond shares is based on the amount of coins delegated divided by the
    current exchange rate. Voting power can be calculated as total bonded
    shares multiplied by exchange rate.
    """

    # operator_address defines the address of the validator's operator; bech
    # encoded in JSON.
    operator_address: str = betterproto.string_field(1)
    # consensus_pubkey is the consensus public key of the validator, as a
    # Protobuf Any.
    consensus_pubkey: protobuf.Any = betterproto.message_field(2)
    # jailed defined whether the validator has been jailed from bonded status or
    # not.
    jailed: bool = betterproto.bool_field(3)
    # status is the validator status (bonded/unbonding/unbonded).
    status: "BondStatus" = betterproto.enum_field(4)
    # tokens define the delegated tokens (incl. self-delegation).
    tokens: str = betterproto.string_field(5)
    # delegator_shares defines total shares issued to a validator's delegators.
    delegator_shares: str = betterproto.string_field(6)
    # description defines the description terms for the validator.
    description: "Description" = betterproto.message_field(7)
    # unbonding_height defines, if unbonding, the height at which this validator
    # has begun unbonding.
    unbonding_height: int = betterproto.int64_field(8)
    # unbonding_time defines, if unbonding, the min time for the validator to
    # complete unbonding.
    unbonding_time: datetime = betterproto.message_field(9)
    # commission defines the commission parameters.
    commission: "Commission" = betterproto.message_field(10)
    # min_self_delegation is the validator's self declared minimum self
    # delegation. Since: cosmos-sdk 0.46
    min_self_delegation: str = betterproto.string_field(11)
    # strictly positive if this validator's unbonding has been stopped by
    # external modules
    unbonding_on_hold_ref_count: int = betterproto.int64_field(12)
    # list of unbonding ids, each uniquely identifing an unbonding of this
    # validator
    unbonding_ids: List[int] = betterproto.uint64_field(13)


@dataclass
class ValAddresses(betterproto.Message):
    """ValAddresses defines a repeated set of validator addresses."""

    addresses: List[str] = betterproto.string_field(1)


@dataclass
class DVPair(betterproto.Message):
    """
    DVPair is struct that just has a delegator-validator pair with no other
    data. It is intended to be used as a marshalable pointer. For example, a
    DVPair can be used to construct the key to getting an UnbondingDelegation
    from state.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)


@dataclass
class DVPairs(betterproto.Message):
    """DVPairs defines an array of DVPair objects."""

    pairs: List["DVPair"] = betterproto.message_field(1)


@dataclass
class DVVTriplet(betterproto.Message):
    """
    DVVTriplet is struct that just has a delegator-validator-validator triplet
    with no other data. It is intended to be used as a marshalable pointer. For
    example, a DVVTriplet can be used to construct the key to getting a
    Redelegation from state.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_src_address: str = betterproto.string_field(2)
    validator_dst_address: str = betterproto.string_field(3)


@dataclass
class DVVTriplets(betterproto.Message):
    """DVVTriplets defines an array of DVVTriplet objects."""

    triplets: List["DVVTriplet"] = betterproto.message_field(1)


@dataclass
class Delegation(betterproto.Message):
    """
    Delegation represents the bond with tokens held by an account. It is owned
    by one delegator, and is associated with the voting power of one validator.
    """

    # delegator_address is the encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_address is the encoded address of the validator.
    validator_address: str = betterproto.string_field(2)
    # shares define the delegation shares received.
    shares: str = betterproto.string_field(3)


@dataclass
class UnbondingDelegation(betterproto.Message):
    """
    UnbondingDelegation stores all of a single delegator's unbonding bonds for
    a single validator in an time-ordered list.
    """

    # delegator_address is the encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_address is the encoded address of the validator.
    validator_address: str = betterproto.string_field(2)
    # entries are the unbonding delegation entries.
    entries: List["UnbondingDelegationEntry"] = betterproto.message_field(3)


@dataclass
class UnbondingDelegationEntry(betterproto.Message):
    """
    UnbondingDelegationEntry defines an unbonding object with relevant
    metadata.
    """

    # creation_height is the height which the unbonding took place.
    creation_height: int = betterproto.int64_field(1)
    # completion_time is the unix time for unbonding completion.
    completion_time: datetime = betterproto.message_field(2)
    # initial_balance defines the tokens initially scheduled to receive at
    # completion.
    initial_balance: str = betterproto.string_field(3)
    # balance defines the tokens to receive at completion.
    balance: str = betterproto.string_field(4)
    # Incrementing id that uniquely identifies this entry
    unbonding_id: int = betterproto.uint64_field(5)
    # Strictly positive if this entry's unbonding has been stopped by external
    # modules
    unbonding_on_hold_ref_count: int = betterproto.int64_field(6)


@dataclass
class RedelegationEntry(betterproto.Message):
    """
    RedelegationEntry defines a redelegation object with relevant metadata.
    """

    # creation_height  defines the height which the redelegation took place.
    creation_height: int = betterproto.int64_field(1)
    # completion_time defines the unix time for redelegation completion.
    completion_time: datetime = betterproto.message_field(2)
    # initial_balance defines the initial balance when redelegation started.
    initial_balance: str = betterproto.string_field(3)
    # shares_dst is the amount of destination-validator shares created by
    # redelegation.
    shares_dst: str = betterproto.string_field(4)
    # Incrementing id that uniquely identifies this entry
    unbonding_id: int = betterproto.uint64_field(5)
    # Strictly positive if this entry's unbonding has been stopped by external
    # modules
    unbonding_on_hold_ref_count: int = betterproto.int64_field(6)


@dataclass
class Redelegation(betterproto.Message):
    """
    Redelegation contains the list of a particular delegator's redelegating
    bonds from a particular source validator to a particular destination
    validator.
    """

    # delegator_address is the bech32-encoded address of the delegator.
    delegator_address: str = betterproto.string_field(1)
    # validator_src_address is the validator redelegation source operator
    # address.
    validator_src_address: str = betterproto.string_field(2)
    # validator_dst_address is the validator redelegation destination operator
    # address.
    validator_dst_address: str = betterproto.string_field(3)
    # entries are the redelegation entries.
    entries: List["RedelegationEntry"] = betterproto.message_field(4)


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the x/staking module."""

    # unbonding_time is the time duration of unbonding.
    unbonding_time: timedelta = betterproto.message_field(1)
    # max_validators is the maximum number of validators.
    max_validators: int = betterproto.uint32_field(2)
    # max_entries is the max entries for either unbonding delegation or
    # redelegation (per pair/trio).
    max_entries: int = betterproto.uint32_field(3)
    # historical_entries is the number of historical entries to persist.
    historical_entries: int = betterproto.uint32_field(4)
    # bond_denom defines the bondable coin denomination.
    bond_denom: str = betterproto.string_field(5)
    # min_commission_rate is the chain-wide minimum commission rate that a
    # validator can charge their delegators
    min_commission_rate: str = betterproto.string_field(6)


@dataclass
class DelegationResponse(betterproto.Message):
    """
    DelegationResponse is equivalent to Delegation except that it contains a
    balance in addition to shares which is more suitable for client responses.
    """

    delegation: "Delegation" = betterproto.message_field(1)
    balance: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class RedelegationEntryResponse(betterproto.Message):
    """
    RedelegationEntryResponse is equivalent to a RedelegationEntry except that
    it contains a balance in addition to shares which is more suitable for
    client responses.
    """

    redelegation_entry: "RedelegationEntry" = betterproto.message_field(1)
    balance: str = betterproto.string_field(4)


@dataclass
class RedelegationResponse(betterproto.Message):
    """
    RedelegationResponse is equivalent to a Redelegation except that its
    entries contain a balance in addition to shares which is more suitable for
    client responses.
    """

    redelegation: "Redelegation" = betterproto.message_field(1)
    entries: List["RedelegationEntryResponse"] = betterproto.message_field(2)


@dataclass
class Pool(betterproto.Message):
    """
    Pool is used for tracking bonded and not-bonded token supply of the bond
    denomination.
    """

    not_bonded_tokens: str = betterproto.string_field(1)
    bonded_tokens: str = betterproto.string_field(2)


@dataclass
class ValidatorUpdates(betterproto.Message):
    """
    ValidatorUpdates defines an array of abci.ValidatorUpdate objects. TODO:
    explore moving this to proto/cosmos/base to separate modules from
    tendermint dependence
    """

    updates: List[abci.ValidatorUpdate] = betterproto.message_field(1)


@dataclass
class MsgCreateValidator(betterproto.Message):
    """
    MsgCreateValidator defines a SDK message for creating a new validator.
    """

    description: "Description" = betterproto.message_field(1)
    commission: "CommissionRates" = betterproto.message_field(2)
    min_self_delegation: str = betterproto.string_field(3)
    # Deprecated: Use of Delegator Address in MsgCreateValidator is deprecated.
    # The validator address bytes and delegator address bytes refer to the same
    # account while creating validator (defer only in bech32 notation).
    delegator_address: str = betterproto.string_field(4)
    validator_address: str = betterproto.string_field(5)
    pubkey: protobuf.Any = betterproto.message_field(6)
    value: v1beta1.Coin = betterproto.message_field(7)


@dataclass
class MsgCreateValidatorResponse(betterproto.Message):
    """
    MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
    """

    pass


@dataclass
class MsgEditValidator(betterproto.Message):
    """
    MsgEditValidator defines a SDK message for editing an existing validator.
    """

    description: "Description" = betterproto.message_field(1)
    validator_address: str = betterproto.string_field(2)
    # We pass a reference to the new commission rate and min self delegation as
    # it's not mandatory to update. If not updated, the deserialized rate will be
    # zero with no way to distinguish if an update was intended. REF: #2373
    commission_rate: str = betterproto.string_field(3)
    min_self_delegation: str = betterproto.string_field(4)


@dataclass
class MsgEditValidatorResponse(betterproto.Message):
    """
    MsgEditValidatorResponse defines the Msg/EditValidator response type.
    """

    pass


@dataclass
class MsgDelegate(betterproto.Message):
    """
    MsgDelegate defines a SDK message for performing a delegation of coins from
    a delegator to a validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgDelegateResponse(betterproto.Message):
    """MsgDelegateResponse defines the Msg/Delegate response type."""

    pass


@dataclass
class MsgBeginRedelegate(betterproto.Message):
    """
    MsgBeginRedelegate defines a SDK message for performing a redelegation of
    coins from a delegator and source validator to a destination validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_src_address: str = betterproto.string_field(2)
    validator_dst_address: str = betterproto.string_field(3)
    amount: v1beta1.Coin = betterproto.message_field(4)


@dataclass
class MsgBeginRedelegateResponse(betterproto.Message):
    """
    MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
    """

    completion_time: datetime = betterproto.message_field(1)


@dataclass
class MsgUndelegate(betterproto.Message):
    """
    MsgUndelegate defines a SDK message for performing an undelegation from a
    delegate and a validator.
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    amount: v1beta1.Coin = betterproto.message_field(3)


@dataclass
class MsgUndelegateResponse(betterproto.Message):
    """MsgUndelegateResponse defines the Msg/Undelegate response type."""

    completion_time: datetime = betterproto.message_field(1)
    # amount returns the amount of undelegated coins Since: cosmos-sdk 0.50
    amount: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class MsgCancelUnbondingDelegation(betterproto.Message):
    """
    MsgCancelUnbondingDelegation defines the SDK message for performing a
    cancel unbonding delegation for delegator Since: cosmos-sdk 0.46
    """

    delegator_address: str = betterproto.string_field(1)
    validator_address: str = betterproto.string_field(2)
    # amount is always less than or equal to unbonding delegation entry balance
    amount: v1beta1.Coin = betterproto.message_field(3)
    # creation_height is the height which the unbonding took place.
    creation_height: int = betterproto.int64_field(4)


@dataclass
class MsgCancelUnbondingDelegationResponse(betterproto.Message):
    """MsgCancelUnbondingDelegationResponse Since: cosmos-sdk 0.46"""

    pass


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)
    # params defines the x/staking parameters to update. NOTE: All parameters
    # must be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class StakeAuthorization(betterproto.Message):
    """
    StakeAuthorization defines authorization for
    delegate/undelegate/redelegate. Since: cosmos-sdk 0.43
    """

    # max_tokens specifies the maximum amount of tokens can be delegate to a
    # validator. If it is empty, there is no spend limit and any amount of coins
    # can be delegated.
    max_tokens: v1beta1.Coin = betterproto.message_field(1)
    # allow_list specifies list of validator addresses to whom grantee can
    # delegate tokens on behalf of granter's account.
    allow_list: "StakeAuthorizationValidators" = betterproto.message_field(
        2, group="validators"
    )
    # deny_list specifies list of validator addresses to whom grantee can not
    # delegate tokens.
    deny_list: "StakeAuthorizationValidators" = betterproto.message_field(
        3, group="validators"
    )
    # authorization_type defines one of AuthorizationType.
    authorization_type: "AuthorizationType" = betterproto.enum_field(4)


@dataclass
class StakeAuthorizationValidators(betterproto.Message):
    """Validators defines list of validator addresses."""

    address: List[str] = betterproto.string_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the staking module's genesis state."""

    # params defines all the parameters of related to deposit.
    params: "Params" = betterproto.message_field(1)
    # last_total_power tracks the total amounts of bonded tokens recorded during
    # the previous end block.
    last_total_power: bytes = betterproto.bytes_field(2)
    # last_validator_powers is a special index that provides a historical list of
    # the last-block's bonded validators.
    last_validator_powers: List["LastValidatorPower"] = betterproto.message_field(3)
    # validators defines the validator set at genesis.
    validators: List["Validator"] = betterproto.message_field(4)
    # delegations defines the delegations active at genesis.
    delegations: List["Delegation"] = betterproto.message_field(5)
    # unbonding_delegations defines the unbonding delegations active at genesis.
    unbonding_delegations: List["UnbondingDelegation"] = betterproto.message_field(6)
    # redelegations defines the redelegations active at genesis.
    redelegations: List["Redelegation"] = betterproto.message_field(7)
    # exported defines a bool to identify whether the chain dealing with exported
    # or initialized genesis.
    exported: bool = betterproto.bool_field(8)


@dataclass
class LastValidatorPower(betterproto.Message):
    """LastValidatorPower required for validator set update logic."""

    # address is the address of the validator.
    address: str = betterproto.string_field(1)
    # power defines the power of the validator.
    power: int = betterproto.int64_field(2)


@dataclass
class QueryValidatorsRequest(betterproto.Message):
    """
    QueryValidatorsRequest is request type for Query/Validators RPC method.
    """

    # status enables to query for validators matching a given status.
    status: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryValidatorsResponse(betterproto.Message):
    """
    QueryValidatorsResponse is response type for the Query/Validators RPC
    method
    """

    # validators contains all the queried validators.
    validators: List["Validator"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryValidatorRequest(betterproto.Message):
    """
    QueryValidatorRequest is response type for the Query/Validator RPC method
    """

    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)


@dataclass
class QueryValidatorResponse(betterproto.Message):
    """
    QueryValidatorResponse is response type for the Query/Validator RPC method
    """

    # validator defines the validator info.
    validator: "Validator" = betterproto.message_field(1)


@dataclass
class QueryValidatorDelegationsRequest(betterproto.Message):
    """
    QueryValidatorDelegationsRequest is request type for the
    Query/ValidatorDelegations RPC method
    """

    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryValidatorDelegationsResponse(betterproto.Message):
    """
    QueryValidatorDelegationsResponse is response type for the
    Query/ValidatorDelegations RPC method
    """

    delegation_responses: List["DelegationResponse"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryValidatorUnbondingDelegationsRequest(betterproto.Message):
    """
    QueryValidatorUnbondingDelegationsRequest is required type for the
    Query/ValidatorUnbondingDelegations RPC method
    """

    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryValidatorUnbondingDelegationsResponse(betterproto.Message):
    """
    QueryValidatorUnbondingDelegationsResponse is response type for the
    Query/ValidatorUnbondingDelegations RPC method.
    """

    unbonding_responses: List["UnbondingDelegation"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDelegationRequest(betterproto.Message):
    """
    QueryDelegationRequest is request type for the Query/Delegation RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(2)


@dataclass
class QueryDelegationResponse(betterproto.Message):
    """
    QueryDelegationResponse is response type for the Query/Delegation RPC
    method.
    """

    # delegation_responses defines the delegation info of a delegation.
    delegation_response: "DelegationResponse" = betterproto.message_field(1)


@dataclass
class QueryUnbondingDelegationRequest(betterproto.Message):
    """
    QueryUnbondingDelegationRequest is request type for the
    Query/UnbondingDelegation RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(2)


@dataclass
class QueryUnbondingDelegationResponse(betterproto.Message):
    """
    QueryDelegationResponse is response type for the Query/UnbondingDelegation
    RPC method.
    """

    # unbond defines the unbonding information of a delegation.
    unbond: "UnbondingDelegation" = betterproto.message_field(1)


@dataclass
class QueryDelegatorDelegationsRequest(betterproto.Message):
    """
    QueryDelegatorDelegationsRequest is request type for the
    Query/DelegatorDelegations RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryDelegatorDelegationsResponse(betterproto.Message):
    """
    QueryDelegatorDelegationsResponse is response type for the
    Query/DelegatorDelegations RPC method.
    """

    # delegation_responses defines all the delegations' info of a delegator.
    delegation_responses: List["DelegationResponse"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDelegatorUnbondingDelegationsRequest(betterproto.Message):
    """
    QueryDelegatorUnbondingDelegationsRequest is request type for the
    Query/DelegatorUnbondingDelegations RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryDelegatorUnbondingDelegationsResponse(betterproto.Message):
    """
    QueryUnbondingDelegatorDelegationsResponse is response type for the
    Query/UnbondingDelegatorDelegations RPC method.
    """

    unbonding_responses: List["UnbondingDelegation"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryRedelegationsRequest(betterproto.Message):
    """
    QueryRedelegationsRequest is request type for the Query/Redelegations RPC
    method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # src_validator_addr defines the validator address to redelegate from.
    src_validator_addr: str = betterproto.string_field(2)
    # dst_validator_addr defines the validator address to redelegate to.
    dst_validator_addr: str = betterproto.string_field(3)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(4)


@dataclass
class QueryRedelegationsResponse(betterproto.Message):
    """
    QueryRedelegationsResponse is response type for the Query/Redelegations RPC
    method.
    """

    redelegation_responses: List["RedelegationResponse"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDelegatorValidatorsRequest(betterproto.Message):
    """
    QueryDelegatorValidatorsRequest is request type for the
    Query/DelegatorValidators RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryDelegatorValidatorsResponse(betterproto.Message):
    """
    QueryDelegatorValidatorsResponse is response type for the
    Query/DelegatorValidators RPC method.
    """

    # validators defines the validators' info of a delegator.
    validators: List["Validator"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryDelegatorValidatorRequest(betterproto.Message):
    """
    QueryDelegatorValidatorRequest is request type for the
    Query/DelegatorValidator RPC method.
    """

    # delegator_addr defines the delegator address to query for.
    delegator_addr: str = betterproto.string_field(1)
    # validator_addr defines the validator address to query for.
    validator_addr: str = betterproto.string_field(2)


@dataclass
class QueryDelegatorValidatorResponse(betterproto.Message):
    """
    QueryDelegatorValidatorResponse response type for the
    Query/DelegatorValidator RPC method.
    """

    # validator defines the validator info.
    validator: "Validator" = betterproto.message_field(1)


@dataclass
class QueryHistoricalInfoRequest(betterproto.Message):
    """
    QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
    method.
    """

    # height defines at which height to query the historical info.
    height: int = betterproto.int64_field(1)


@dataclass
class QueryHistoricalInfoResponse(betterproto.Message):
    """
    QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo
    RPC method.
    """

    # hist defines the historical info at the given height.
    hist: "HistoricalInfo" = betterproto.message_field(1)


@dataclass
class QueryPoolRequest(betterproto.Message):
    """QueryPoolRequest is request type for the Query/Pool RPC method."""

    pass


@dataclass
class QueryPoolResponse(betterproto.Message):
    """QueryPoolResponse is response type for the Query/Pool RPC method."""

    # pool defines the pool info.
    pool: "Pool" = betterproto.message_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    # params holds all the parameters of this module.
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the staking Msg service."""

    async def create_validator(
        self,
        *,
        description: Optional["Description"] = None,
        commission: Optional["CommissionRates"] = None,
        min_self_delegation: str = "",
        delegator_address: str = "",
        validator_address: str = "",
        pubkey: Optional[protobuf.Any] = None,
        value: Optional[v1beta1.Coin] = None,
    ) -> MsgCreateValidatorResponse:
        """CreateValidator defines a method for creating a new validator."""

        request = MsgCreateValidator()
        if description is not None:
            request.description = description
        if commission is not None:
            request.commission = commission
        request.min_self_delegation = min_self_delegation
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if pubkey is not None:
            request.pubkey = pubkey
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/CreateValidator",
            request,
            MsgCreateValidatorResponse,
        )

    async def edit_validator(
        self,
        *,
        description: Optional["Description"] = None,
        validator_address: str = "",
        commission_rate: str = "",
        min_self_delegation: str = "",
    ) -> MsgEditValidatorResponse:
        """
        EditValidator defines a method for editing an existing validator.
        """

        request = MsgEditValidator()
        if description is not None:
            request.description = description
        request.validator_address = validator_address
        request.commission_rate = commission_rate
        request.min_self_delegation = min_self_delegation

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/EditValidator",
            request,
            MsgEditValidatorResponse,
        )

    async def delegate(
        self,
        *,
        delegator_address: str = "",
        validator_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgDelegateResponse:
        """
        Delegate defines a method for performing a delegation of coins from a
        delegator to a validator.
        """

        request = MsgDelegate()
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Delegate",
            request,
            MsgDelegateResponse,
        )

    async def begin_redelegate(
        self,
        *,
        delegator_address: str = "",
        validator_src_address: str = "",
        validator_dst_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgBeginRedelegateResponse:
        """
        BeginRedelegate defines a method for performing a redelegation of coins
        from a delegator and source validator to a destination validator.
        """

        request = MsgBeginRedelegate()
        request.delegator_address = delegator_address
        request.validator_src_address = validator_src_address
        request.validator_dst_address = validator_dst_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
            request,
            MsgBeginRedelegateResponse,
        )

    async def undelegate(
        self,
        *,
        delegator_address: str = "",
        validator_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
    ) -> MsgUndelegateResponse:
        """
        Undelegate defines a method for performing an undelegation from a
        delegate and a validator.
        """

        request = MsgUndelegate()
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/Undelegate",
            request,
            MsgUndelegateResponse,
        )

    async def cancel_unbonding_delegation(
        self,
        *,
        delegator_address: str = "",
        validator_address: str = "",
        amount: Optional[v1beta1.Coin] = None,
        creation_height: int = 0,
    ) -> MsgCancelUnbondingDelegationResponse:
        """
        CancelUnbondingDelegation defines a method for performing canceling the
        unbonding delegation and delegate back to previous validator. Since:
        cosmos-sdk 0.46
        """

        request = MsgCancelUnbondingDelegation()
        request.delegator_address = delegator_address
        request.validator_address = validator_address
        if amount is not None:
            request.amount = amount
        request.creation_height = creation_height

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
            request,
            MsgCancelUnbondingDelegationResponse,
        )

    async def update_params(
        self, *, authority: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateParams defines an operation for updating the x/staking module
        parameters. Since: cosmos-sdk 0.47
        """

        request = MsgUpdateParams()
        request.authority = authority
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def validators(
        self, *, status: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryValidatorsResponse:
        """
        Validators queries all validators that match the given status. When
        called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        request = QueryValidatorsRequest()
        request.status = status
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Validators",
            request,
            QueryValidatorsResponse,
        )

    async def validator(self, *, validator_addr: str = "") -> QueryValidatorResponse:
        """Validator queries validator info for given validator address."""

        request = QueryValidatorRequest()
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Validator",
            request,
            QueryValidatorResponse,
        )

    async def validator_delegations(
        self,
        *,
        validator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryValidatorDelegationsResponse:
        """
        ValidatorDelegations queries delegate info for given validator. When
        called from another module, this query might consume a high amount of
        gas if the pagination field is incorrectly set.
        """

        request = QueryValidatorDelegationsRequest()
        request.validator_addr = validator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
            request,
            QueryValidatorDelegationsResponse,
        )

    async def validator_unbonding_delegations(
        self,
        *,
        validator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryValidatorUnbondingDelegationsResponse:
        """
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator. When called from another module, this query might consume a
        high amount of gas if the pagination field is incorrectly set.
        """

        request = QueryValidatorUnbondingDelegationsRequest()
        request.validator_addr = validator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
            request,
            QueryValidatorUnbondingDelegationsResponse,
        )

    async def delegation(
        self, *, delegator_addr: str = "", validator_addr: str = ""
    ) -> QueryDelegationResponse:
        """
        Delegation queries delegate info for given validator delegator pair.
        """

        request = QueryDelegationRequest()
        request.delegator_addr = delegator_addr
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Delegation",
            request,
            QueryDelegationResponse,
        )

    async def unbonding_delegation(
        self, *, delegator_addr: str = "", validator_addr: str = ""
    ) -> QueryUnbondingDelegationResponse:
        """
        UnbondingDelegation queries unbonding info for given validator
        delegator pair.
        """

        request = QueryUnbondingDelegationRequest()
        request.delegator_addr = delegator_addr
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
            request,
            QueryUnbondingDelegationResponse,
        )

    async def delegator_delegations(
        self,
        *,
        delegator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryDelegatorDelegationsResponse:
        """
        DelegatorDelegations queries all delegations of a given delegator
        address. When called from another module, this query might consume a
        high amount of gas if the pagination field is incorrectly set.
        """

        request = QueryDelegatorDelegationsRequest()
        request.delegator_addr = delegator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
            request,
            QueryDelegatorDelegationsResponse,
        )

    async def delegator_unbonding_delegations(
        self,
        *,
        delegator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryDelegatorUnbondingDelegationsResponse:
        """
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given delegator address. When called from another module, this query
        might consume a high amount of gas if the pagination field is
        incorrectly set.
        """

        request = QueryDelegatorUnbondingDelegationsRequest()
        request.delegator_addr = delegator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
            request,
            QueryDelegatorUnbondingDelegationsResponse,
        )

    async def redelegations(
        self,
        *,
        delegator_addr: str = "",
        src_validator_addr: str = "",
        dst_validator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryRedelegationsResponse:
        """
        Redelegations queries redelegations of given address. When called from
        another module, this query might consume a high amount of gas if the
        pagination field is incorrectly set.
        """

        request = QueryRedelegationsRequest()
        request.delegator_addr = delegator_addr
        request.src_validator_addr = src_validator_addr
        request.dst_validator_addr = dst_validator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Redelegations",
            request,
            QueryRedelegationsResponse,
        )

    async def delegator_validators(
        self,
        *,
        delegator_addr: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryDelegatorValidatorsResponse:
        """
        DelegatorValidators queries all validators info for given delegator
        address. When called from another module, this query might consume a
        high amount of gas if the pagination field is incorrectly set.
        """

        request = QueryDelegatorValidatorsRequest()
        request.delegator_addr = delegator_addr
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidators",
            request,
            QueryDelegatorValidatorsResponse,
        )

    async def delegator_validator(
        self, *, delegator_addr: str = "", validator_addr: str = ""
    ) -> QueryDelegatorValidatorResponse:
        """
        DelegatorValidator queries validator info for given delegator validator
        pair.
        """

        request = QueryDelegatorValidatorRequest()
        request.delegator_addr = delegator_addr
        request.validator_addr = validator_addr

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/DelegatorValidator",
            request,
            QueryDelegatorValidatorResponse,
        )

    async def historical_info(self, *, height: int = 0) -> QueryHistoricalInfoResponse:
        """HistoricalInfo queries the historical info for given height."""

        request = QueryHistoricalInfoRequest()
        request.height = height

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/HistoricalInfo",
            request,
            QueryHistoricalInfoResponse,
        )

    async def pool(self) -> QueryPoolResponse:
        """Pool queries the pool info."""

        request = QueryPoolRequest()

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Pool",
            request,
            QueryPoolResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Parameters queries the staking parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cosmos.staking.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
