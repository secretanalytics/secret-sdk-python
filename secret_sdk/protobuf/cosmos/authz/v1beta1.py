# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/authz/v1beta1/event.proto, cosmos/authz/v1beta1/authz.proto, cosmos/authz/v1beta1/tx.proto, cosmos/authz/v1beta1/genesis.proto, cosmos/authz/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base.query import v1beta1
from .google import protobuf


@dataclass
class EventGrant(betterproto.Message):
    """EventGrant is emitted on Msg/Grant"""

    # Msg type URL for which an autorization is granted
    msg_type_url: str = betterproto.string_field(2)
    # Granter account address
    granter: str = betterproto.string_field(3)
    # Grantee account address
    grantee: str = betterproto.string_field(4)


@dataclass
class EventRevoke(betterproto.Message):
    """EventRevoke is emitted on Msg/Revoke"""

    # Msg type URL for which an autorization is revoked
    msg_type_url: str = betterproto.string_field(2)
    # Granter account address
    granter: str = betterproto.string_field(3)
    # Grantee account address
    grantee: str = betterproto.string_field(4)


@dataclass
class GenericAuthorization(betterproto.Message):
    """
    GenericAuthorization gives the grantee unrestricted permissions to execute
    the provided method on behalf of the granter's account.
    """

    # Msg, identified by it's type URL, to grant unrestricted permissions to
    # execute
    msg: str = betterproto.string_field(1)


@dataclass
class Grant(betterproto.Message):
    """
    Grant gives permissions to execute the provide method with expiration time.
    """

    authorization: protobuf.Any = betterproto.message_field(1)
    # time when the grant will expire and will be pruned. If null, then the grant
    # doesn't have a time expiration (other conditions  in `authorization` may
    # apply to invalidate the grant)
    expiration: datetime = betterproto.message_field(2)


@dataclass
class GrantAuthorization(betterproto.Message):
    """
    GrantAuthorization extends a grant with both the addresses of the grantee
    and granter. It is used in genesis.proto and query.proto
    """

    granter: str = betterproto.string_field(1)
    grantee: str = betterproto.string_field(2)
    authorization: protobuf.Any = betterproto.message_field(3)
    expiration: datetime = betterproto.message_field(4)


@dataclass
class GrantQueueItem(betterproto.Message):
    """GrantQueueItem contains the list of TypeURL of a sdk.Msg."""

    # msg_type_urls contains the list of TypeURL of a sdk.Msg.
    msg_type_urls: List[str] = betterproto.string_field(1)


@dataclass
class MsgGrant(betterproto.Message):
    """
    MsgGrant is a request type for Grant method. It declares authorization to
    the grantee on behalf of the granter with the provided expiration time.
    """

    granter: str = betterproto.string_field(1)
    grantee: str = betterproto.string_field(2)
    grant: "Grant" = betterproto.message_field(3)


@dataclass
class MsgGrantResponse(betterproto.Message):
    """MsgGrantResponse defines the Msg/MsgGrant response type."""

    pass


@dataclass
class MsgExec(betterproto.Message):
    """
    MsgExec attempts to execute the provided messages using authorizations
    granted to the grantee. Each message should have only one signer
    corresponding to the granter of the authorization.
    """

    grantee: str = betterproto.string_field(1)
    # Execute Msg. The x/authz will try to find a grant matching (msg.signers[0],
    # grantee, MsgTypeURL(msg)) triple and validate it.
    msgs: List[protobuf.Any] = betterproto.message_field(2)


@dataclass
class MsgExecResponse(betterproto.Message):
    """MsgExecResponse defines the Msg/MsgExecResponse response type."""

    results: List[bytes] = betterproto.bytes_field(1)


@dataclass
class MsgRevoke(betterproto.Message):
    """
    MsgRevoke revokes any authorization with the provided sdk.Msg type on the
    granter's account with that has been granted to the grantee.
    """

    granter: str = betterproto.string_field(1)
    grantee: str = betterproto.string_field(2)
    msg_type_url: str = betterproto.string_field(3)


@dataclass
class MsgRevokeResponse(betterproto.Message):
    """MsgRevokeResponse defines the Msg/MsgRevokeResponse response type."""

    pass


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the authz module's genesis state."""

    authorization: List["GrantAuthorization"] = betterproto.message_field(1)


@dataclass
class QueryGrantsRequest(betterproto.Message):
    """
    QueryGrantsRequest is the request type for the Query/Grants RPC method.
    """

    granter: str = betterproto.string_field(1)
    grantee: str = betterproto.string_field(2)
    # Optional, msg_type_url, when set, will query only grants matching given msg
    # type.
    msg_type_url: str = betterproto.string_field(3)
    # pagination defines an pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(4)


@dataclass
class QueryGrantsResponse(betterproto.Message):
    """
    QueryGrantsResponse is the response type for the Query/Authorizations RPC
    method.
    """

    # authorizations is a list of grants granted for grantee by granter.
    grants: List["Grant"] = betterproto.message_field(1)
    # pagination defines an pagination for the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryGranterGrantsRequest(betterproto.Message):
    """
    QueryGranterGrantsRequest is the request type for the Query/GranterGrants
    RPC method.
    """

    granter: str = betterproto.string_field(1)
    # pagination defines an pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryGranterGrantsResponse(betterproto.Message):
    """
    QueryGranterGrantsResponse is the response type for the Query/GranterGrants
    RPC method.
    """

    # grants is a list of grants granted by the granter.
    grants: List["GrantAuthorization"] = betterproto.message_field(1)
    # pagination defines an pagination for the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryGranteeGrantsRequest(betterproto.Message):
    """
    QueryGranteeGrantsRequest is the request type for the Query/GranteeGrants
    RPC method.
    """

    grantee: str = betterproto.string_field(1)
    # pagination defines an pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryGranteeGrantsResponse(betterproto.Message):
    """
    QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants
    RPC method.
    """

    # grants is a list of grants granted to the grantee.
    grants: List["GrantAuthorization"] = betterproto.message_field(1)
    # pagination defines an pagination for the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the authz Msg service."""

    async def grant(
        self, *, granter: str = "", grantee: str = "", grant: Optional["Grant"] = None
    ) -> MsgGrantResponse:
        """
        Grant grants the provided authorization to the grantee on the granter's
        account with the provided expiration time. If there is already a grant
        for the given (granter, grantee, Authorization) triple, then the grant
        will be overwritten.
        """

        request = MsgGrant()
        request.granter = granter
        request.grantee = grantee
        if grant is not None:
            request.grant = grant

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Grant",
            request,
            MsgGrantResponse,
        )

    async def exec(
        self, *, grantee: str = "", msgs: List[protobuf.Any] = []
    ) -> MsgExecResponse:
        """
        Exec attempts to execute the provided messages using authorizations
        granted to the grantee. Each message should have only one signer
        corresponding to the granter of the authorization.
        """

        request = MsgExec()
        request.grantee = grantee
        if msgs is not None:
            request.msgs = msgs

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Exec",
            request,
            MsgExecResponse,
        )

    async def revoke(
        self, *, granter: str = "", grantee: str = "", msg_type_url: str = ""
    ) -> MsgRevokeResponse:
        """
        Revoke revokes any authorization corresponding to the provided method
        name on the granter's account that has been granted to the grantee.
        """

        request = MsgRevoke()
        request.granter = granter
        request.grantee = grantee
        request.msg_type_url = msg_type_url

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Msg/Revoke",
            request,
            MsgRevokeResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def grants(
        self,
        *,
        granter: str = "",
        grantee: str = "",
        msg_type_url: str = "",
        pagination: Optional[v1beta1.PageRequest] = None,
    ) -> QueryGrantsResponse:
        """
        Returns list of `Authorization`, granted to the grantee by the granter.
        """

        request = QueryGrantsRequest()
        request.granter = granter
        request.grantee = grantee
        request.msg_type_url = msg_type_url
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/Grants",
            request,
            QueryGrantsResponse,
        )

    async def granter_grants(
        self, *, granter: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryGranterGrantsResponse:
        """
        GranterGrants returns list of `GrantAuthorization`, granted by granter.
        Since: cosmos-sdk 0.46
        """

        request = QueryGranterGrantsRequest()
        request.granter = granter
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/GranterGrants",
            request,
            QueryGranterGrantsResponse,
        )

    async def grantee_grants(
        self, *, grantee: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryGranteeGrantsResponse:
        """
        GranteeGrants returns a list of `GrantAuthorization` by grantee. Since:
        cosmos-sdk 0.46
        """

        request = QueryGranteeGrantsRequest()
        request.grantee = grantee
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cosmos.authz.v1beta1.Query/GranteeGrants",
            request,
            QueryGranteeGrantsResponse,
        )
