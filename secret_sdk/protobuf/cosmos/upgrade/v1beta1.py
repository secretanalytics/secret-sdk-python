# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/upgrade/v1beta1/upgrade.proto, cosmos/upgrade/v1beta1/tx.proto, cosmos/upgrade/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib

from .google import protobuf


@dataclass
class Plan(betterproto.Message):
    """
    Plan specifies information about a planned upgrade and when it should
    occur.
    """

    # Sets the name for the upgrade. This name will be used by the upgraded
    # version of the software to apply any special "on-upgrade" commands during
    # the first BeginBlock method after the upgrade is applied. It is also used
    # to detect whether a software version can handle a given upgrade. If no
    # upgrade handler with this name has been set in the software, it will be
    # assumed that the software is out-of-date when the upgrade Time or Height is
    # reached and the software will exit.
    name: str = betterproto.string_field(1)
    # Deprecated: Time based upgrades have been deprecated. Time based upgrade
    # logic has been removed from the SDK. If this field is not empty, an error
    # will be thrown.
    time: datetime = betterproto.message_field(2)
    # The height at which the upgrade must be performed.
    height: int = betterproto.int64_field(3)
    # Any application specific upgrade info to be included on-chain such as a git
    # commit that validators could automatically upgrade to
    info: str = betterproto.string_field(4)
    # Deprecated: UpgradedClientState field has been deprecated. IBC upgrade
    # logic has been moved to the IBC module in the sub module 02-client. If this
    # field is not empty, an error will be thrown.
    upgraded_client_state: protobuf.Any = betterproto.message_field(5)


@dataclass
class SoftwareUpgradeProposal(betterproto.Message):
    """
    SoftwareUpgradeProposal is a gov Content type for initiating a software
    upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-
    based gov proposals, see MsgSoftwareUpgrade.
    """

    # title of the proposal
    title: str = betterproto.string_field(1)
    # description of the proposal
    description: str = betterproto.string_field(2)
    # plan of the proposal
    plan: "Plan" = betterproto.message_field(3)


@dataclass
class CancelSoftwareUpgradeProposal(betterproto.Message):
    """
    CancelSoftwareUpgradeProposal is a gov Content type for cancelling a
    software upgrade. Deprecated: This legacy proposal is deprecated in favor
    of Msg-based gov proposals, see MsgCancelUpgrade.
    """

    # title of the proposal
    title: str = betterproto.string_field(1)
    # description of the proposal
    description: str = betterproto.string_field(2)


@dataclass
class ModuleVersion(betterproto.Message):
    """
    ModuleVersion specifies a module and its consensus version. Since: cosmos-
    sdk 0.43
    """

    # name of the app module
    name: str = betterproto.string_field(1)
    # consensus version of the app module
    version: int = betterproto.uint64_field(2)


@dataclass
class MsgSoftwareUpgrade(betterproto.Message):
    """
    MsgSoftwareUpgrade is the Msg/SoftwareUpgrade request type. Since: cosmos-
    sdk 0.46
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)
    # plan is the upgrade plan.
    plan: "Plan" = betterproto.message_field(2)


@dataclass
class MsgSoftwareUpgradeResponse(betterproto.Message):
    """
    MsgSoftwareUpgradeResponse is the Msg/SoftwareUpgrade response type. Since:
    cosmos-sdk 0.46
    """

    pass


@dataclass
class MsgCancelUpgrade(betterproto.Message):
    """
    MsgCancelUpgrade is the Msg/CancelUpgrade request type. Since: cosmos-sdk
    0.46
    """

    # authority is the address that controls the module (defaults to x/gov unless
    # overwritten).
    authority: str = betterproto.string_field(1)


@dataclass
class MsgCancelUpgradeResponse(betterproto.Message):
    """
    MsgCancelUpgradeResponse is the Msg/CancelUpgrade response type. Since:
    cosmos-sdk 0.46
    """

    pass


@dataclass
class QueryCurrentPlanRequest(betterproto.Message):
    """
    QueryCurrentPlanRequest is the request type for the Query/CurrentPlan RPC
    method.
    """

    pass


@dataclass
class QueryCurrentPlanResponse(betterproto.Message):
    """
    QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
    method.
    """

    # plan is the current upgrade plan.
    plan: "Plan" = betterproto.message_field(1)


@dataclass
class QueryAppliedPlanRequest(betterproto.Message):
    """
    QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC
    method.
    """

    # name is the name of the applied plan to query for.
    name: str = betterproto.string_field(1)


@dataclass
class QueryAppliedPlanResponse(betterproto.Message):
    """
    QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
    method.
    """

    # height is the block height at which the plan was applied.
    height: int = betterproto.int64_field(1)


@dataclass
class QueryUpgradedConsensusStateRequest(betterproto.Message):
    """
    QueryUpgradedConsensusStateRequest is the request type for the
    Query/UpgradedConsensusState RPC method.
    """

    # last height of the current chain must be sent in request as this is the
    # height under which next consensus state is stored
    last_height: int = betterproto.int64_field(1)


@dataclass
class QueryUpgradedConsensusStateResponse(betterproto.Message):
    """
    QueryUpgradedConsensusStateResponse is the response type for the
    Query/UpgradedConsensusState RPC method.
    """

    # Since: cosmos-sdk 0.43
    upgraded_consensus_state: bytes = betterproto.bytes_field(2)


@dataclass
class QueryModuleVersionsRequest(betterproto.Message):
    """
    QueryModuleVersionsRequest is the request type for the Query/ModuleVersions
    RPC method. Since: cosmos-sdk 0.43
    """

    # module_name is a field to query a specific module consensus version from
    # state. Leaving this empty will fetch the full list of module versions from
    # state
    module_name: str = betterproto.string_field(1)


@dataclass
class QueryModuleVersionsResponse(betterproto.Message):
    """
    QueryModuleVersionsResponse is the response type for the
    Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
    """

    # module_versions is a list of module names with their consensus versions.
    module_versions: List["ModuleVersion"] = betterproto.message_field(1)


@dataclass
class QueryAuthorityRequest(betterproto.Message):
    """
    QueryAuthorityRequest is the request type for Query/Authority Since:
    cosmos-sdk 0.46
    """

    pass


@dataclass
class QueryAuthorityResponse(betterproto.Message):
    """
    QueryAuthorityResponse is the response type for Query/Authority Since:
    cosmos-sdk 0.46
    """

    address: str = betterproto.string_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the upgrade Msg service."""

    async def software_upgrade(
        self, *, authority: str = "", plan: Optional["Plan"] = None
    ) -> MsgSoftwareUpgradeResponse:
        """
        SoftwareUpgrade is a governance operation for initiating a software
        upgrade. Since: cosmos-sdk 0.46
        """

        request = MsgSoftwareUpgrade()
        request.authority = authority
        if plan is not None:
            request.plan = plan

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/SoftwareUpgrade",
            request,
            MsgSoftwareUpgradeResponse,
        )

    async def cancel_upgrade(self, *, authority: str = "") -> MsgCancelUpgradeResponse:
        """
        CancelUpgrade is a governance operation for cancelling a previously
        approved software upgrade. Since: cosmos-sdk 0.46
        """

        request = MsgCancelUpgrade()
        request.authority = authority

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Msg/CancelUpgrade",
            request,
            MsgCancelUpgradeResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC upgrade querier service."""

    async def current_plan(self) -> QueryCurrentPlanResponse:
        """CurrentPlan queries the current upgrade plan."""

        request = QueryCurrentPlanRequest()

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/CurrentPlan",
            request,
            QueryCurrentPlanResponse,
        )

    async def applied_plan(self, *, name: str = "") -> QueryAppliedPlanResponse:
        """
        AppliedPlan queries a previously applied upgrade plan by its name.
        """

        request = QueryAppliedPlanRequest()
        request.name = name

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/AppliedPlan",
            request,
            QueryAppliedPlanResponse,
        )

    async def upgraded_consensus_state(
        self, *, last_height: int = 0
    ) -> QueryUpgradedConsensusStateResponse:
        """
        UpgradedConsensusState queries the consensus state that will serve as a
        trusted kernel for the next version of this chain. It will only be
        stored at the last height of this chain. UpgradedConsensusState RPC not
        supported with legacy querier This rpc is deprecated now that IBC has
        its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9
        cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
        """

        request = QueryUpgradedConsensusStateRequest()
        request.last_height = last_height

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/UpgradedConsensusState",
            request,
            QueryUpgradedConsensusStateResponse,
        )

    async def module_versions(
        self, *, module_name: str = ""
    ) -> QueryModuleVersionsResponse:
        """
        ModuleVersions queries the list of module versions from state. Since:
        cosmos-sdk 0.43
        """

        request = QueryModuleVersionsRequest()
        request.module_name = module_name

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/ModuleVersions",
            request,
            QueryModuleVersionsResponse,
        )

    async def authority(self) -> QueryAuthorityResponse:
        """
        Returns the account with authority to conduct upgrades Since: cosmos-
        sdk 0.46
        """

        request = QueryAuthorityRequest()

        return await self._unary_unary(
            "/cosmos.upgrade.v1beta1.Query/Authority",
            request,
            QueryAuthorityResponse,
        )
