# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc-apps/packetforward/v1/genesis.proto, ibc-apps/packetforward/v1/tx.proto, ibc-apps/packetforward/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, Optional

import betterproto
import grpclib


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the packetforward genesis state"""

    params: "Params" = betterproto.message_field(1)
    # key - information about forwarded packet: src_channel
    # (parsedReceiver.Channel), src_port (parsedReceiver.Port), sequence value -
    # information about original packet for refunding if necessary: retries,
    # srcPacketSender, srcPacket.DestinationChannel, srcPacket.DestinationPort
    in_flight_packets: Dict[str, "InFlightPacket"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class Params(betterproto.Message):
    """Params defines the set of packetforward parameters."""

    fee_percentage: str = betterproto.string_field(1)


@dataclass
class InFlightPacket(betterproto.Message):
    """
    InFlightPacket contains information about original packet for writing the
    acknowledgement and refunding if necessary.
    """

    original_sender_address: str = betterproto.string_field(1)
    refund_channel_id: str = betterproto.string_field(2)
    refund_port_id: str = betterproto.string_field(3)
    packet_src_channel_id: str = betterproto.string_field(4)
    packet_src_port_id: str = betterproto.string_field(5)
    packet_timeout_timestamp: int = betterproto.uint64_field(6)
    packet_timeout_height: str = betterproto.string_field(7)
    packet_data: bytes = betterproto.bytes_field(8)
    refund_sequence: int = betterproto.uint64_field(9)
    retries_remaining: int = betterproto.int32_field(10)
    timeout: int = betterproto.uint64_field(11)
    nonrefundable: bool = betterproto.bool_field(12)


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type. Since: cosmos-sdk
    0.47
    """

    # authority is the address of the governance account.
    authority: str = betterproto.string_field(1)
    # params defines the x/packetforward parameters to update. NOTE: All
    # parameters must be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message. Since: cosmos-sdk 0.47
    """

    pass


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the Msg service."""

    async def update_params(
        self, *, authority: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateParams defines a governance operation for updating the
        x/packetforward module parameters. The authority is hard-coded to the
        x/gov module account. Since: cosmos-sdk 0.47
        """

        request = MsgUpdateParams()
        request.authority = authority
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/packetforward.v1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query provides defines the gRPC querier service."""

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters of the packetforward module."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/packetforward.v1.Query/Params",
            request,
            QueryParamsResponse,
        )
