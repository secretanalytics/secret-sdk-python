# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc/applications/fee/v1/fee.proto, ibc/applications/fee/v1/tx.proto, ibc/applications/fee/v1/ack.proto, ibc/applications/fee/v1/genesis.proto, ibc/applications/fee/v1/query.proto, ibc/applications/fee/v1/metadata.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.base.query import v1beta1
from .ibc.core.channel import v1


@dataclass
class Fee(betterproto.Message):
    """Fee defines the ICS29 receive, acknowledgement and timeout fees"""

    # the packet receive fee
    recv_fee: List[v1beta1.Coin] = betterproto.message_field(1)
    # the packet acknowledgement fee
    ack_fee: List[v1beta1.Coin] = betterproto.message_field(2)
    # the packet timeout fee
    timeout_fee: List[v1beta1.Coin] = betterproto.message_field(3)


@dataclass
class PacketFee(betterproto.Message):
    """
    PacketFee contains ICS29 relayer fees, refund address and optional list of
    permitted relayers
    """

    # fee encapsulates the recv, ack and timeout fees associated with an IBC
    # packet
    fee: "Fee" = betterproto.message_field(1)
    # the refund address for unspent fees
    refund_address: str = betterproto.string_field(2)
    # optional list of relayers permitted to receive fees
    relayers: List[str] = betterproto.string_field(3)


@dataclass
class PacketFees(betterproto.Message):
    """PacketFees contains a list of type PacketFee"""

    # list of packet fees
    packet_fees: List["PacketFee"] = betterproto.message_field(1)


@dataclass
class IdentifiedPacketFees(betterproto.Message):
    """
    IdentifiedPacketFees contains a list of type PacketFee and associated
    PacketId
    """

    # unique packet identifier comprised of the channel ID, port ID and sequence
    packet_id: v1.PacketId = betterproto.message_field(1)
    # list of packet fees
    packet_fees: List["PacketFee"] = betterproto.message_field(2)


@dataclass
class MsgRegisterPayee(betterproto.Message):
    """MsgRegisterPayee defines the request type for the RegisterPayee rpc"""

    # unique port identifier
    port_id: str = betterproto.string_field(1)
    # unique channel identifier
    channel_id: str = betterproto.string_field(2)
    # the relayer address
    relayer: str = betterproto.string_field(3)
    # the payee address
    payee: str = betterproto.string_field(4)


@dataclass
class MsgRegisterPayeeResponse(betterproto.Message):
    """
    MsgRegisterPayeeResponse defines the response type for the RegisterPayee
    rpc
    """

    pass


@dataclass
class MsgRegisterCounterpartyPayee(betterproto.Message):
    """
    MsgRegisterCounterpartyPayee defines the request type for the
    RegisterCounterpartyPayee rpc
    """

    # unique port identifier
    port_id: str = betterproto.string_field(1)
    # unique channel identifier
    channel_id: str = betterproto.string_field(2)
    # the relayer address
    relayer: str = betterproto.string_field(3)
    # the counterparty payee address
    counterparty_payee: str = betterproto.string_field(4)


@dataclass
class MsgRegisterCounterpartyPayeeResponse(betterproto.Message):
    """
    MsgRegisterCounterpartyPayeeResponse defines the response type for the
    RegisterCounterpartyPayee rpc
    """

    pass


@dataclass
class MsgPayPacketFee(betterproto.Message):
    """
    MsgPayPacketFee defines the request type for the PayPacketFee rpc This Msg
    can be used to pay for a packet at the next sequence send & should be
    combined with the Msg that will be paid for
    """

    # fee encapsulates the recv, ack and timeout fees associated with an IBC
    # packet
    fee: "Fee" = betterproto.message_field(1)
    # the source port unique identifier
    source_port_id: str = betterproto.string_field(2)
    # the source channel unique identifer
    source_channel_id: str = betterproto.string_field(3)
    # account address to refund fee if necessary
    signer: str = betterproto.string_field(4)
    # optional list of relayers permitted to the receive packet fees
    relayers: List[str] = betterproto.string_field(5)


@dataclass
class MsgPayPacketFeeResponse(betterproto.Message):
    """
    MsgPayPacketFeeResponse defines the response type for the PayPacketFee rpc
    """

    pass


@dataclass
class MsgPayPacketFeeAsync(betterproto.Message):
    """
    MsgPayPacketFeeAsync defines the request type for the PayPacketFeeAsync rpc
    This Msg can be used to pay for a packet at a specified sequence (instead
    of the next sequence send)
    """

    # unique packet identifier comprised of the channel ID, port ID and sequence
    packet_id: v1.PacketId = betterproto.message_field(1)
    # the packet fee associated with a particular IBC packet
    packet_fee: "PacketFee" = betterproto.message_field(2)


@dataclass
class MsgPayPacketFeeAsyncResponse(betterproto.Message):
    """
    MsgPayPacketFeeAsyncResponse defines the response type for the
    PayPacketFeeAsync rpc
    """

    pass


@dataclass
class IncentivizedAcknowledgement(betterproto.Message):
    """
    IncentivizedAcknowledgement is the acknowledgement format to be used by
    applications wrapped in the fee middleware
    """

    # the underlying app acknowledgement bytes
    app_acknowledgement: bytes = betterproto.bytes_field(1)
    # the relayer address which submits the recv packet message
    forward_relayer_address: str = betterproto.string_field(2)
    # success flag of the base application callback
    underlying_app_success: bool = betterproto.bool_field(3)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the ICS29 fee middleware genesis state"""

    # list of identified packet fees
    identified_fees: List["IdentifiedPacketFees"] = betterproto.message_field(1)
    # list of fee enabled channels
    fee_enabled_channels: List["FeeEnabledChannel"] = betterproto.message_field(2)
    # list of registered payees
    registered_payees: List["RegisteredPayee"] = betterproto.message_field(3)
    # list of registered counterparty payees
    registered_counterparty_payees: List["RegisteredCounterpartyPayee"] = (
        betterproto.message_field(4)
    )
    # list of forward relayer addresses
    forward_relayers: List["ForwardRelayerAddress"] = betterproto.message_field(5)


@dataclass
class FeeEnabledChannel(betterproto.Message):
    """
    FeeEnabledChannel contains the PortID & ChannelID for a fee enabled channel
    """

    # unique port identifier
    port_id: str = betterproto.string_field(1)
    # unique channel identifier
    channel_id: str = betterproto.string_field(2)


@dataclass
class RegisteredPayee(betterproto.Message):
    """
    RegisteredPayee contains the relayer address and payee address for a
    specific channel
    """

    # unique channel identifier
    channel_id: str = betterproto.string_field(1)
    # the relayer address
    relayer: str = betterproto.string_field(2)
    # the payee address
    payee: str = betterproto.string_field(3)


@dataclass
class RegisteredCounterpartyPayee(betterproto.Message):
    """
    RegisteredCounterpartyPayee contains the relayer address and counterparty
    payee address for a specific channel (used for recv fee distribution)
    """

    # unique channel identifier
    channel_id: str = betterproto.string_field(1)
    # the relayer address
    relayer: str = betterproto.string_field(2)
    # the counterparty payee address
    counterparty_payee: str = betterproto.string_field(3)


@dataclass
class ForwardRelayerAddress(betterproto.Message):
    """
    ForwardRelayerAddress contains the forward relayer address and PacketId
    used for async acknowledgements
    """

    # the forward relayer address
    address: str = betterproto.string_field(1)
    # unique packet identifer comprised of the channel ID, port ID and sequence
    packet_id: v1.PacketId = betterproto.message_field(2)


@dataclass
class QueryIncentivizedPacketsRequest(betterproto.Message):
    """
    QueryIncentivizedPacketsRequest defines the request type for the
    IncentivizedPackets rpc
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)
    # block height at which to query
    query_height: int = betterproto.uint64_field(2)


@dataclass
class QueryIncentivizedPacketsResponse(betterproto.Message):
    """
    QueryIncentivizedPacketsResponse defines the response type for the
    IncentivizedPackets rpc
    """

    # list of identified fees for incentivized packets
    incentivized_packets: List["IdentifiedPacketFees"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryIncentivizedPacketRequest(betterproto.Message):
    """
    QueryIncentivizedPacketRequest defines the request type for the
    IncentivizedPacket rpc
    """

    # unique packet identifier comprised of channel ID, port ID and sequence
    packet_id: v1.PacketId = betterproto.message_field(1)
    # block height at which to query
    query_height: int = betterproto.uint64_field(2)


@dataclass
class QueryIncentivizedPacketResponse(betterproto.Message):
    """
    QueryIncentivizedPacketsResponse defines the response type for the
    IncentivizedPacket rpc
    """

    # the identified fees for the incentivized packet
    incentivized_packet: "IdentifiedPacketFees" = betterproto.message_field(1)


@dataclass
class QueryIncentivizedPacketsForChannelRequest(betterproto.Message):
    """
    QueryIncentivizedPacketsForChannelRequest defines the request type for
    querying for all incentivized packets for a specific channel
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)
    port_id: str = betterproto.string_field(2)
    channel_id: str = betterproto.string_field(3)
    # Height to query at
    query_height: int = betterproto.uint64_field(4)


@dataclass
class QueryIncentivizedPacketsForChannelResponse(betterproto.Message):
    """
    QueryIncentivizedPacketsResponse defines the response type for the
    incentivized packets RPC
    """

    # Map of all incentivized_packets
    incentivized_packets: List["IdentifiedPacketFees"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryTotalRecvFeesRequest(betterproto.Message):
    """
    QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees
    rpc
    """

    # the packet identifier for the associated fees
    packet_id: v1.PacketId = betterproto.message_field(1)


@dataclass
class QueryTotalRecvFeesResponse(betterproto.Message):
    """
    QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees
    rpc
    """

    # the total packet receive fees
    recv_fees: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryTotalAckFeesRequest(betterproto.Message):
    """
    QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
    """

    # the packet identifier for the associated fees
    packet_id: v1.PacketId = betterproto.message_field(1)


@dataclass
class QueryTotalAckFeesResponse(betterproto.Message):
    """
    QueryTotalAckFeesResponse defines the response type for the TotalAckFees
    rpc
    """

    # the total packet acknowledgement fees
    ack_fees: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryTotalTimeoutFeesRequest(betterproto.Message):
    """
    QueryTotalTimeoutFeesRequest defines the request type for the
    TotalTimeoutFees rpc
    """

    # the packet identifier for the associated fees
    packet_id: v1.PacketId = betterproto.message_field(1)


@dataclass
class QueryTotalTimeoutFeesResponse(betterproto.Message):
    """
    QueryTotalTimeoutFeesResponse defines the response type for the
    TotalTimeoutFees rpc
    """

    # the total packet timeout fees
    timeout_fees: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryPayeeRequest(betterproto.Message):
    """QueryPayeeRequest defines the request type for the Payee rpc"""

    # unique channel identifier
    channel_id: str = betterproto.string_field(1)
    # the relayer address to which the distribution address is registered
    relayer: str = betterproto.string_field(2)


@dataclass
class QueryPayeeResponse(betterproto.Message):
    """QueryPayeeResponse defines the response type for the Payee rpc"""

    # the payee address to which packet fees are paid out
    payee_address: str = betterproto.string_field(1)


@dataclass
class QueryCounterpartyPayeeRequest(betterproto.Message):
    """
    QueryCounterpartyPayeeRequest defines the request type for the
    CounterpartyPayee rpc
    """

    # unique channel identifier
    channel_id: str = betterproto.string_field(1)
    # the relayer address to which the counterparty is registered
    relayer: str = betterproto.string_field(2)


@dataclass
class QueryCounterpartyPayeeResponse(betterproto.Message):
    """
    QueryCounterpartyPayeeResponse defines the response type for the
    CounterpartyPayee rpc
    """

    # the counterparty payee address used to compensate forward relaying
    counterparty_payee: str = betterproto.string_field(1)


@dataclass
class QueryFeeEnabledChannelsRequest(betterproto.Message):
    """
    QueryFeeEnabledChannelsRequest defines the request type for the
    FeeEnabledChannels rpc
    """

    # pagination defines an optional pagination for the request.
    pagination: v1beta1.PageRequest = betterproto.message_field(1)
    # block height at which to query
    query_height: int = betterproto.uint64_field(2)


@dataclass
class QueryFeeEnabledChannelsResponse(betterproto.Message):
    """
    QueryFeeEnabledChannelsResponse defines the response type for the
    FeeEnabledChannels rpc
    """

    # list of fee enabled channels
    fee_enabled_channels: List["FeeEnabledChannel"] = betterproto.message_field(1)
    # pagination defines the pagination in the response.
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryFeeEnabledChannelRequest(betterproto.Message):
    """
    QueryFeeEnabledChannelRequest defines the request type for the
    FeeEnabledChannel rpc
    """

    # unique port identifier
    port_id: str = betterproto.string_field(1)
    # unique channel identifier
    channel_id: str = betterproto.string_field(2)


@dataclass
class QueryFeeEnabledChannelResponse(betterproto.Message):
    """
    QueryFeeEnabledChannelResponse defines the response type for the
    FeeEnabledChannel rpc
    """

    # boolean flag representing the fee enabled channel status
    fee_enabled: bool = betterproto.bool_field(1)


@dataclass
class Metadata(betterproto.Message):
    """
    Metadata defines the ICS29 channel specific metadata encoded into the
    channel version bytestring See ICS004:
    https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-
    packet-semantics#Versioning
    """

    # fee_version defines the ICS29 fee version
    fee_version: str = betterproto.string_field(1)
    # app_version defines the underlying application version, which may or may
    # not be a JSON encoded bytestring
    app_version: str = betterproto.string_field(2)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the ICS29 Msg service."""

    async def register_payee(
        self,
        *,
        port_id: str = "",
        channel_id: str = "",
        relayer: str = "",
        payee: str = "",
    ) -> MsgRegisterPayeeResponse:
        """
        RegisterPayee defines a rpc handler method for MsgRegisterPayee
        RegisterPayee is called by the relayer on each channelEnd and allows
        them to set an optional payee to which reverse and timeout relayer
        packet fees will be paid out. The payee should be registered on the
        source chain from which packets originate as this is where fee
        distribution takes place. This function may be called more than once by
        a relayer, in which case, the latest payee is always used.
        """

        request = MsgRegisterPayee()
        request.port_id = port_id
        request.channel_id = channel_id
        request.relayer = relayer
        request.payee = payee

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Msg/RegisterPayee",
            request,
            MsgRegisterPayeeResponse,
        )

    async def register_counterparty_payee(
        self,
        *,
        port_id: str = "",
        channel_id: str = "",
        relayer: str = "",
        counterparty_payee: str = "",
    ) -> MsgRegisterCounterpartyPayeeResponse:
        """
        RegisterCounterpartyPayee defines a rpc handler method for
        MsgRegisterCounterpartyPayee RegisterCounterpartyPayee is called by the
        relayer on each channelEnd and allows them to specify the counterparty
        payee address before relaying. This ensures they will be properly
        compensated for forward relaying since the destination chain must
        include the registered counterparty payee address in the
        acknowledgement. This function may be called more than once by a
        relayer, in which case, the latest counterparty payee address is always
        used.
        """

        request = MsgRegisterCounterpartyPayee()
        request.port_id = port_id
        request.channel_id = channel_id
        request.relayer = relayer
        request.counterparty_payee = counterparty_payee

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Msg/RegisterCounterpartyPayee",
            request,
            MsgRegisterCounterpartyPayeeResponse,
        )

    async def pay_packet_fee(
        self,
        *,
        fee: Optional["Fee"] = None,
        source_port_id: str = "",
        source_channel_id: str = "",
        signer: str = "",
        relayers: List[str] = [],
    ) -> MsgPayPacketFeeResponse:
        """
        PayPacketFee defines a rpc handler method for MsgPayPacketFee
        PayPacketFee is an open callback that may be called by any module/user
        that wishes to escrow funds in order to incentivize the relaying of the
        packet at the next sequence NOTE: This method is intended to be used
        within a multi msg transaction, where the subsequent msg that follows
        initiates the lifecycle of the incentivized packet
        """

        request = MsgPayPacketFee()
        if fee is not None:
            request.fee = fee
        request.source_port_id = source_port_id
        request.source_channel_id = source_channel_id
        request.signer = signer
        request.relayers = relayers

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Msg/PayPacketFee",
            request,
            MsgPayPacketFeeResponse,
        )

    async def pay_packet_fee_async(
        self,
        *,
        packet_id: Optional[v1.PacketId] = None,
        packet_fee: Optional["PacketFee"] = None,
    ) -> MsgPayPacketFeeAsyncResponse:
        """
        PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
        PayPacketFeeAsync is an open callback that may be called by any
        module/user that wishes to escrow funds in order to incentivize the
        relaying of a known packet (i.e. at a particular sequence)
        """

        request = MsgPayPacketFeeAsync()
        if packet_id is not None:
            request.packet_id = packet_id
        if packet_fee is not None:
            request.packet_fee = packet_fee

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Msg/PayPacketFeeAsync",
            request,
            MsgPayPacketFeeAsyncResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the ICS29 gRPC querier service."""

    async def incentivized_packets(
        self, *, pagination: Optional[v1beta1.PageRequest] = None, query_height: int = 0
    ) -> QueryIncentivizedPacketsResponse:
        """
        IncentivizedPackets returns all incentivized packets and their
        associated fees
        """

        request = QueryIncentivizedPacketsRequest()
        if pagination is not None:
            request.pagination = pagination
        request.query_height = query_height

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/IncentivizedPackets",
            request,
            QueryIncentivizedPacketsResponse,
        )

    async def incentivized_packet(
        self, *, packet_id: Optional[v1.PacketId] = None, query_height: int = 0
    ) -> QueryIncentivizedPacketResponse:
        """
        IncentivizedPacket returns all packet fees for a packet given its
        identifier
        """

        request = QueryIncentivizedPacketRequest()
        if packet_id is not None:
            request.packet_id = packet_id
        request.query_height = query_height

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/IncentivizedPacket",
            request,
            QueryIncentivizedPacketResponse,
        )

    async def incentivized_packets_for_channel(
        self,
        *,
        pagination: Optional[v1beta1.PageRequest] = None,
        port_id: str = "",
        channel_id: str = "",
        query_height: int = 0,
    ) -> QueryIncentivizedPacketsForChannelResponse:
        """Gets all incentivized packets for a specific channel"""

        request = QueryIncentivizedPacketsForChannelRequest()
        if pagination is not None:
            request.pagination = pagination
        request.port_id = port_id
        request.channel_id = channel_id
        request.query_height = query_height

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
            request,
            QueryIncentivizedPacketsForChannelResponse,
        )

    async def total_recv_fees(
        self, *, packet_id: Optional[v1.PacketId] = None
    ) -> QueryTotalRecvFeesResponse:
        """
        TotalRecvFees returns the total receive fees for a packet given its
        identifier
        """

        request = QueryTotalRecvFeesRequest()
        if packet_id is not None:
            request.packet_id = packet_id

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/TotalRecvFees",
            request,
            QueryTotalRecvFeesResponse,
        )

    async def total_ack_fees(
        self, *, packet_id: Optional[v1.PacketId] = None
    ) -> QueryTotalAckFeesResponse:
        """
        TotalAckFees returns the total acknowledgement fees for a packet given
        its identifier
        """

        request = QueryTotalAckFeesRequest()
        if packet_id is not None:
            request.packet_id = packet_id

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/TotalAckFees",
            request,
            QueryTotalAckFeesResponse,
        )

    async def total_timeout_fees(
        self, *, packet_id: Optional[v1.PacketId] = None
    ) -> QueryTotalTimeoutFeesResponse:
        """
        TotalTimeoutFees returns the total timeout fees for a packet given its
        identifier
        """

        request = QueryTotalTimeoutFeesRequest()
        if packet_id is not None:
            request.packet_id = packet_id

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
            request,
            QueryTotalTimeoutFeesResponse,
        )

    async def payee(
        self, *, channel_id: str = "", relayer: str = ""
    ) -> QueryPayeeResponse:
        """
        Payee returns the registered payee address for a specific channel given
        the relayer address
        """

        request = QueryPayeeRequest()
        request.channel_id = channel_id
        request.relayer = relayer

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/Payee",
            request,
            QueryPayeeResponse,
        )

    async def counterparty_payee(
        self, *, channel_id: str = "", relayer: str = ""
    ) -> QueryCounterpartyPayeeResponse:
        """
        CounterpartyPayee returns the registered counterparty payee for forward
        relaying
        """

        request = QueryCounterpartyPayeeRequest()
        request.channel_id = channel_id
        request.relayer = relayer

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/CounterpartyPayee",
            request,
            QueryCounterpartyPayeeResponse,
        )

    async def fee_enabled_channels(
        self, *, pagination: Optional[v1beta1.PageRequest] = None, query_height: int = 0
    ) -> QueryFeeEnabledChannelsResponse:
        """FeeEnabledChannels returns a list of all fee enabled channels"""

        request = QueryFeeEnabledChannelsRequest()
        if pagination is not None:
            request.pagination = pagination
        request.query_height = query_height

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
            request,
            QueryFeeEnabledChannelsResponse,
        )

    async def fee_enabled_channel(
        self, *, port_id: str = "", channel_id: str = ""
    ) -> QueryFeeEnabledChannelResponse:
        """
        FeeEnabledChannel returns true if the provided port and channel
        identifiers belong to a fee enabled channel
        """

        request = QueryFeeEnabledChannelRequest()
        request.port_id = port_id
        request.channel_id = channel_id

        return await self._unary_unary(
            "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
            request,
            QueryFeeEnabledChannelResponse,
        )
