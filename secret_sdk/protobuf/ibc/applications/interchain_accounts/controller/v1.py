# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc/applications/interchain_accounts/controller/v1/controller.proto, ibc/applications/interchain_accounts/controller/v1/tx.proto, ibc/applications/interchain_accounts/controller/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
import grpclib

from .ibc.applications.interchain_accounts import v1
from .ibc.core.channel import v1


@dataclass
class Params(betterproto.Message):
    """
    Params defines the set of on-chain interchain accounts parameters. The
    following parameters may be used to disable the controller submodule.
    """

    # controller_enabled enables or disables the controller submodule.
    controller_enabled: bool = betterproto.bool_field(1)


@dataclass
class MsgRegisterInterchainAccount(betterproto.Message):
    """
    MsgRegisterInterchainAccount defines the payload for Msg/RegisterAccount
    """

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)
    ordering: v1.Order = betterproto.enum_field(4)


@dataclass
class MsgRegisterInterchainAccountResponse(betterproto.Message):
    """
    MsgRegisterInterchainAccountResponse defines the response for
    Msg/RegisterAccount
    """

    channel_id: str = betterproto.string_field(1)
    port_id: str = betterproto.string_field(2)


@dataclass
class MsgSendTx(betterproto.Message):
    """MsgSendTx defines the payload for Msg/SendTx"""

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)
    packet_data: v1.InterchainAccountPacketData = betterproto.message_field(3)
    # Relative timeout timestamp provided will be added to the current block time
    # during transaction execution. The timeout timestamp must be non-zero.
    relative_timeout: int = betterproto.uint64_field(4)


@dataclass
class MsgSendTxResponse(betterproto.Message):
    """MsgSendTxResponse defines the response for MsgSendTx"""

    sequence: int = betterproto.uint64_field(1)


@dataclass
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams defines the payload for Msg/UpdateParams"""

    # signer address
    signer: str = betterproto.string_field(1)
    # params defines the 27-interchain-accounts/controller parameters to update.
    # NOTE: All parameters must be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """MsgUpdateParamsResponse defines the response for Msg/UpdateParams"""

    pass


@dataclass
class QueryInterchainAccountRequest(betterproto.Message):
    """
    QueryInterchainAccountRequest is the request type for the
    Query/InterchainAccount RPC method.
    """

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)


@dataclass
class QueryInterchainAccountResponse(betterproto.Message):
    """
    QueryInterchainAccountResponse the response type for the
    Query/InterchainAccount RPC method.
    """

    address: str = betterproto.string_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the 27-interchain-accounts/controller Msg service."""

    async def register_interchain_account(
        self,
        *,
        owner: str = "",
        connection_id: str = "",
        version: str = "",
        ordering: v1.Order = 0,
    ) -> MsgRegisterInterchainAccountResponse:
        """
        RegisterInterchainAccount defines a rpc handler for
        MsgRegisterInterchainAccount.
        """

        request = MsgRegisterInterchainAccount()
        request.owner = owner
        request.connection_id = connection_id
        request.version = version
        request.ordering = ordering

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.controller.v1.Msg/RegisterInterchainAccount",
            request,
            MsgRegisterInterchainAccountResponse,
        )

    async def send_tx(
        self,
        *,
        owner: str = "",
        connection_id: str = "",
        packet_data: Optional[v1.InterchainAccountPacketData] = None,
        relative_timeout: int = 0,
    ) -> MsgSendTxResponse:
        """SendTx defines a rpc handler for MsgSendTx."""

        request = MsgSendTx()
        request.owner = owner
        request.connection_id = connection_id
        if packet_data is not None:
            request.packet_data = packet_data
        request.relative_timeout = relative_timeout

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.controller.v1.Msg/SendTx",
            request,
            MsgSendTxResponse,
        )

    async def update_params(
        self, *, signer: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """UpdateParams defines a rpc handler for MsgUpdateParams."""

        request = MsgUpdateParams()
        request.signer = signer
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.controller.v1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query provides defines the gRPC querier service."""

    async def interchain_account(
        self, *, owner: str = "", connection_id: str = ""
    ) -> QueryInterchainAccountResponse:
        """
        InterchainAccount returns the interchain account address for a given
        owner address on a given connection
        """

        request = QueryInterchainAccountRequest()
        request.owner = owner
        request.connection_id = connection_id

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.controller.v1.Query/InterchainAccount",
            request,
            QueryInterchainAccountResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters of the ICA controller submodule."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.controller.v1.Query/Params",
            request,
            QueryParamsResponse,
        )
