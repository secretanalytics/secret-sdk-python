# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc/applications/interchain_accounts/host/v1/host.proto, ibc/applications/interchain_accounts/host/v1/tx.proto, ibc/applications/interchain_accounts/host/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass
class Params(betterproto.Message):
    """
    Params defines the set of on-chain interchain accounts parameters. The
    following parameters may be used to disable the host submodule.
    """

    # host_enabled enables or disables the host submodule.
    host_enabled: bool = betterproto.bool_field(1)
    # allow_messages defines a list of sdk message typeURLs allowed to be
    # executed on a host chain.
    allow_messages: List[str] = betterproto.string_field(2)


@dataclass
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams defines the payload for Msg/UpdateParams"""

    # signer address
    signer: str = betterproto.string_field(1)
    # params defines the 27-interchain-accounts/host parameters to update. NOTE:
    # All parameters must be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """MsgUpdateParamsResponse defines the response for Msg/UpdateParams"""

    pass


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the 27-interchain-accounts/host Msg service."""

    async def update_params(
        self, *, signer: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """UpdateParams defines a rpc handler for MsgUpdateParams."""

        request = MsgUpdateParams()
        request.signer = signer
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.host.v1.Msg/UpdateParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query provides defines the gRPC querier service."""

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters of the ICA host submodule."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/ibc.applications.interchain_accounts.host.v1.Query/Params",
            request,
            QueryParamsResponse,
        )
