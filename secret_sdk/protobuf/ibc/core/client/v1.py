# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc/core/client/v1/client.proto, ibc/core/client/v1/tx.proto, ibc/core/client/v1/genesis.proto, ibc/core/client/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base.query import v1beta1
from .cosmos.upgrade import v1beta1
from .google import protobuf


@dataclass
class IdentifiedClientState(betterproto.Message):
    """
    IdentifiedClientState defines a client state with an additional client
    identifier field.
    """

    # client identifier
    client_id: str = betterproto.string_field(1)
    # client state
    client_state: protobuf.Any = betterproto.message_field(2)


@dataclass
class ConsensusStateWithHeight(betterproto.Message):
    """
    ConsensusStateWithHeight defines a consensus state with an additional
    height field.
    """

    # consensus state height
    height: "Height" = betterproto.message_field(1)
    # consensus state
    consensus_state: protobuf.Any = betterproto.message_field(2)


@dataclass
class ClientConsensusStates(betterproto.Message):
    """
    ClientConsensusStates defines all the stored consensus states for a given
    client.
    """

    # client identifier
    client_id: str = betterproto.string_field(1)
    # consensus states and their heights associated with the client
    consensus_states: List["ConsensusStateWithHeight"] = betterproto.message_field(2)


@dataclass
class Height(betterproto.Message):
    """
    Height is a monotonically increasing data type that can be compared against
    another Height for the purposes of updating and freezing clients Normally
    the RevisionHeight is incremented at each height while keeping
    RevisionNumber the same. However some consensus algorithms may choose to
    reset the height in certain conditions e.g. hard forks, state-machine
    breaking changes In these cases, the RevisionNumber is incremented so that
    height continues to be monitonically increasing even as the RevisionHeight
    gets reset
    """

    # the revision that the client is currently on
    revision_number: int = betterproto.uint64_field(1)
    # the height within the given revision
    revision_height: int = betterproto.uint64_field(2)


@dataclass
class Params(betterproto.Message):
    """Params defines the set of IBC light client parameters."""

    # allowed_clients defines the list of allowed client state types which can be
    # created and interacted with. If a client type is removed from the allowed
    # clients list, usage of this client will be disabled until it is added again
    # to the list.
    allowed_clients: List[str] = betterproto.string_field(1)


@dataclass
class ClientUpdateProposal(betterproto.Message):
    """
    ClientUpdateProposal is a legacy governance proposal. If it passes, the
    substitute client's latest consensus state is copied over to the subject
    client. The proposal handler may fail if the subject and the substitute do
    not match in client and chain parameters (with exception to latest height,
    frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in
    favour of this message type.
    """

    # the title of the update proposal
    title: str = betterproto.string_field(1)
    # the description of the proposal
    description: str = betterproto.string_field(2)
    # the client identifier for the client to be updated if the proposal passes
    subject_client_id: str = betterproto.string_field(3)
    # the substitute client identifier for the client standing in for the subject
    # client
    substitute_client_id: str = betterproto.string_field(4)


@dataclass
class UpgradeProposal(betterproto.Message):
    """
    UpgradeProposal is a gov Content type for initiating an IBC breaking
    upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this
    message type.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    plan: v1beta1.Plan = betterproto.message_field(3)
    # An UpgradedClientState must be provided to perform an IBC breaking upgrade.
    # This will make the chain commit to the correct upgraded (self) client state
    # before the upgrade occurs, so that connecting chains can verify that the
    # new upgraded client is valid by verifying a proof on the previous version
    # of the chain. This will allow IBC connections to persist smoothly across
    # planned chain upgrades
    upgraded_client_state: protobuf.Any = betterproto.message_field(4)


@dataclass
class MsgCreateClient(betterproto.Message):
    """MsgCreateClient defines a message to create an IBC client"""

    # light client state
    client_state: protobuf.Any = betterproto.message_field(1)
    # consensus state associated with the client that corresponds to a given
    # height.
    consensus_state: protobuf.Any = betterproto.message_field(2)
    # signer address
    signer: str = betterproto.string_field(3)


@dataclass
class MsgCreateClientResponse(betterproto.Message):
    """MsgCreateClientResponse defines the Msg/CreateClient response type."""

    pass


@dataclass
class MsgUpdateClient(betterproto.Message):
    """
    MsgUpdateClient defines an sdk.Msg to update a IBC client state using the
    given client message.
    """

    # client unique identifier
    client_id: str = betterproto.string_field(1)
    # client message to update the light client
    client_message: protobuf.Any = betterproto.message_field(2)
    # signer address
    signer: str = betterproto.string_field(3)


@dataclass
class MsgUpdateClientResponse(betterproto.Message):
    """MsgUpdateClientResponse defines the Msg/UpdateClient response type."""

    pass


@dataclass
class MsgUpgradeClient(betterproto.Message):
    """
    MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a new
    client state
    """

    # client unique identifier
    client_id: str = betterproto.string_field(1)
    # upgraded client state
    client_state: protobuf.Any = betterproto.message_field(2)
    # upgraded consensus state, only contains enough information to serve as a
    # basis of trust in update logic
    consensus_state: protobuf.Any = betterproto.message_field(3)
    # proof that old chain committed to new client
    proof_upgrade_client: bytes = betterproto.bytes_field(4)
    # proof that old chain committed to new consensus state
    proof_upgrade_consensus_state: bytes = betterproto.bytes_field(5)
    # signer address
    signer: str = betterproto.string_field(6)


@dataclass
class MsgUpgradeClientResponse(betterproto.Message):
    """
    MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
    """

    pass


@dataclass
class MsgSubmitMisbehaviour(betterproto.Message):
    """
    MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence for
    light client misbehaviour. This message has been deprecated. Use
    MsgUpdateClient instead.
    """

    # client unique identifier
    client_id: str = betterproto.string_field(1)
    # misbehaviour used for freezing the light client
    misbehaviour: protobuf.Any = betterproto.message_field(2)
    # signer address
    signer: str = betterproto.string_field(3)


@dataclass
class MsgSubmitMisbehaviourResponse(betterproto.Message):
    """
    MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
    type.
    """

    pass


@dataclass
class MsgRecoverClient(betterproto.Message):
    """
    MsgRecoverClient defines the message used to recover a frozen or expired
    client.
    """

    # the client identifier for the client to be updated if the proposal passes
    subject_client_id: str = betterproto.string_field(1)
    # the substitute client identifier for the client which will replace the
    # subject client
    substitute_client_id: str = betterproto.string_field(2)
    # signer address
    signer: str = betterproto.string_field(3)


@dataclass
class MsgRecoverClientResponse(betterproto.Message):
    """
    MsgRecoverClientResponse defines the Msg/RecoverClient response type.
    """

    pass


@dataclass
class MsgIBCSoftwareUpgrade(betterproto.Message):
    """
    MsgIBCSoftwareUpgrade defines the message used to schedule an upgrade of an
    IBC client using a v1 governance proposal
    """

    plan: v1beta1.Plan = betterproto.message_field(1)
    # An UpgradedClientState must be provided to perform an IBC breaking upgrade.
    # This will make the chain commit to the correct upgraded (self) client state
    # before the upgrade occurs, so that connecting chains can verify that the
    # new upgraded client is valid by verifying a proof on the previous version
    # of the chain. This will allow IBC connections to persist smoothly across
    # planned chain upgrades. Correspondingly, the UpgradedClientState field has
    # been deprecated in the Cosmos SDK to allow for this logic to exist solely
    # in the 02-client module.
    upgraded_client_state: protobuf.Any = betterproto.message_field(2)
    # signer address
    signer: str = betterproto.string_field(3)


@dataclass
class MsgIBCSoftwareUpgradeResponse(betterproto.Message):
    """
    MsgIBCSoftwareUpgradeResponse defines the Msg/IBCSoftwareUpgrade response
    type.
    """

    pass


@dataclass
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams defines the sdk.Msg type to update the client parameters.
    """

    # signer address
    signer: str = betterproto.string_field(1)
    # params defines the client parameters to update. NOTE: All parameters must
    # be supplied.
    params: "Params" = betterproto.message_field(2)


@dataclass
class MsgUpdateParamsResponse(betterproto.Message):
    """MsgUpdateParamsResponse defines the MsgUpdateParams response type."""

    pass


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the ibc client submodule's genesis state."""

    # client states with their corresponding identifiers
    clients: List["IdentifiedClientState"] = betterproto.message_field(1)
    # consensus states from each client
    clients_consensus: List["ClientConsensusStates"] = betterproto.message_field(2)
    # metadata from each client
    clients_metadata: List["IdentifiedGenesisMetadata"] = betterproto.message_field(3)
    params: "Params" = betterproto.message_field(4)
    # Deprecated: create_localhost has been deprecated. The localhost client is
    # automatically created at genesis.
    create_localhost: bool = betterproto.bool_field(5)
    # the sequence for the next generated client identifier
    next_client_sequence: int = betterproto.uint64_field(6)


@dataclass
class GenesisMetadata(betterproto.Message):
    """
    GenesisMetadata defines the genesis type for metadata that clients may
    return with ExportMetadata
    """

    # store key of metadata without clientID-prefix
    key: bytes = betterproto.bytes_field(1)
    # metadata value
    value: bytes = betterproto.bytes_field(2)


@dataclass
class IdentifiedGenesisMetadata(betterproto.Message):
    """
    IdentifiedGenesisMetadata has the client metadata with the corresponding
    client id.
    """

    client_id: str = betterproto.string_field(1)
    client_metadata: List["GenesisMetadata"] = betterproto.message_field(2)


@dataclass
class QueryClientStateRequest(betterproto.Message):
    """
    QueryClientStateRequest is the request type for the Query/ClientState RPC
    method
    """

    # client state unique identifier
    client_id: str = betterproto.string_field(1)


@dataclass
class QueryClientStateResponse(betterproto.Message):
    """
    QueryClientStateResponse is the response type for the Query/ClientState RPC
    method. Besides the client state, it includes a proof and the height from
    which the proof was retrieved.
    """

    # client state associated with the request identifier
    client_state: protobuf.Any = betterproto.message_field(1)
    # merkle proof of existence
    proof: bytes = betterproto.bytes_field(2)
    # height at which the proof was retrieved
    proof_height: "Height" = betterproto.message_field(3)


@dataclass
class QueryClientStatesRequest(betterproto.Message):
    """
    QueryClientStatesRequest is the request type for the Query/ClientStates RPC
    method
    """

    # pagination request
    pagination: v1beta1.PageRequest = betterproto.message_field(1)


@dataclass
class QueryClientStatesResponse(betterproto.Message):
    """
    QueryClientStatesResponse is the response type for the Query/ClientStates
    RPC method.
    """

    # list of stored ClientStates of the chain.
    client_states: List["IdentifiedClientState"] = betterproto.message_field(1)
    # pagination response
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryConsensusStateRequest(betterproto.Message):
    """
    QueryConsensusStateRequest is the request type for the Query/ConsensusState
    RPC method. Besides the consensus state, it includes a proof and the height
    from which the proof was retrieved.
    """

    # client identifier
    client_id: str = betterproto.string_field(1)
    # consensus state revision number
    revision_number: int = betterproto.uint64_field(2)
    # consensus state revision height
    revision_height: int = betterproto.uint64_field(3)
    # latest_height overrrides the height field and queries the latest stored
    # ConsensusState
    latest_height: bool = betterproto.bool_field(4)


@dataclass
class QueryConsensusStateResponse(betterproto.Message):
    """
    QueryConsensusStateResponse is the response type for the
    Query/ConsensusState RPC method
    """

    # consensus state associated with the client identifier at the given height
    consensus_state: protobuf.Any = betterproto.message_field(1)
    # merkle proof of existence
    proof: bytes = betterproto.bytes_field(2)
    # height at which the proof was retrieved
    proof_height: "Height" = betterproto.message_field(3)


@dataclass
class QueryConsensusStatesRequest(betterproto.Message):
    """
    QueryConsensusStatesRequest is the request type for the
    Query/ConsensusStates RPC method.
    """

    # client identifier
    client_id: str = betterproto.string_field(1)
    # pagination request
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryConsensusStatesResponse(betterproto.Message):
    """
    QueryConsensusStatesResponse is the response type for the
    Query/ConsensusStates RPC method
    """

    # consensus states associated with the identifier
    consensus_states: List["ConsensusStateWithHeight"] = betterproto.message_field(1)
    # pagination response
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryConsensusStateHeightsRequest(betterproto.Message):
    """
    QueryConsensusStateHeightsRequest is the request type for
    Query/ConsensusStateHeights RPC method.
    """

    # client identifier
    client_id: str = betterproto.string_field(1)
    # pagination request
    pagination: v1beta1.PageRequest = betterproto.message_field(2)


@dataclass
class QueryConsensusStateHeightsResponse(betterproto.Message):
    """
    QueryConsensusStateHeightsResponse is the response type for the
    Query/ConsensusStateHeights RPC method
    """

    # consensus state heights
    consensus_state_heights: List["Height"] = betterproto.message_field(1)
    # pagination response
    pagination: v1beta1.PageResponse = betterproto.message_field(2)


@dataclass
class QueryClientStatusRequest(betterproto.Message):
    """
    QueryClientStatusRequest is the request type for the Query/ClientStatus RPC
    method
    """

    # client unique identifier
    client_id: str = betterproto.string_field(1)


@dataclass
class QueryClientStatusResponse(betterproto.Message):
    """
    QueryClientStatusResponse is the response type for the Query/ClientStatus
    RPC method. It returns the current status of the IBC client.
    """

    status: str = betterproto.string_field(1)


@dataclass
class QueryClientParamsRequest(betterproto.Message):
    """
    QueryClientParamsRequest is the request type for the Query/ClientParams RPC
    method.
    """

    pass


@dataclass
class QueryClientParamsResponse(betterproto.Message):
    """
    QueryClientParamsResponse is the response type for the Query/ClientParams
    RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class QueryUpgradedClientStateRequest(betterproto.Message):
    """
    QueryUpgradedClientStateRequest is the request type for the
    Query/UpgradedClientState RPC method
    """

    pass


@dataclass
class QueryUpgradedClientStateResponse(betterproto.Message):
    """
    QueryUpgradedClientStateResponse is the response type for the
    Query/UpgradedClientState RPC method.
    """

    # client state associated with the request identifier
    upgraded_client_state: protobuf.Any = betterproto.message_field(1)


@dataclass
class QueryUpgradedConsensusStateRequest(betterproto.Message):
    """
    QueryUpgradedConsensusStateRequest is the request type for the
    Query/UpgradedConsensusState RPC method
    """

    pass


@dataclass
class QueryUpgradedConsensusStateResponse(betterproto.Message):
    """
    QueryUpgradedConsensusStateResponse is the response type for the
    Query/UpgradedConsensusState RPC method.
    """

    # Consensus state associated with the request identifier
    upgraded_consensus_state: protobuf.Any = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the ibc/client Msg service."""

    async def create_client(
        self,
        *,
        client_state: Optional[protobuf.Any] = None,
        consensus_state: Optional[protobuf.Any] = None,
        signer: str = "",
    ) -> MsgCreateClientResponse:
        """CreateClient defines a rpc handler method for MsgCreateClient."""

        request = MsgCreateClient()
        if client_state is not None:
            request.client_state = client_state
        if consensus_state is not None:
            request.consensus_state = consensus_state
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/CreateClient",
            request,
            MsgCreateClientResponse,
        )

    async def update_client(
        self,
        *,
        client_id: str = "",
        client_message: Optional[protobuf.Any] = None,
        signer: str = "",
    ) -> MsgUpdateClientResponse:
        """UpdateClient defines a rpc handler method for MsgUpdateClient."""

        request = MsgUpdateClient()
        request.client_id = client_id
        if client_message is not None:
            request.client_message = client_message
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/UpdateClient",
            request,
            MsgUpdateClientResponse,
        )

    async def upgrade_client(
        self,
        *,
        client_id: str = "",
        client_state: Optional[protobuf.Any] = None,
        consensus_state: Optional[protobuf.Any] = None,
        proof_upgrade_client: bytes = b"",
        proof_upgrade_consensus_state: bytes = b"",
        signer: str = "",
    ) -> MsgUpgradeClientResponse:
        """UpgradeClient defines a rpc handler method for MsgUpgradeClient."""

        request = MsgUpgradeClient()
        request.client_id = client_id
        if client_state is not None:
            request.client_state = client_state
        if consensus_state is not None:
            request.consensus_state = consensus_state
        request.proof_upgrade_client = proof_upgrade_client
        request.proof_upgrade_consensus_state = proof_upgrade_consensus_state
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/UpgradeClient",
            request,
            MsgUpgradeClientResponse,
        )

    async def submit_misbehaviour(
        self,
        *,
        client_id: str = "",
        misbehaviour: Optional[protobuf.Any] = None,
        signer: str = "",
    ) -> MsgSubmitMisbehaviourResponse:
        """
        SubmitMisbehaviour defines a rpc handler method for
        MsgSubmitMisbehaviour.
        """

        request = MsgSubmitMisbehaviour()
        request.client_id = client_id
        if misbehaviour is not None:
            request.misbehaviour = misbehaviour
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/SubmitMisbehaviour",
            request,
            MsgSubmitMisbehaviourResponse,
        )

    async def recover_client(
        self,
        *,
        subject_client_id: str = "",
        substitute_client_id: str = "",
        signer: str = "",
    ) -> MsgRecoverClientResponse:
        """RecoverClient defines a rpc handler method for MsgRecoverClient."""

        request = MsgRecoverClient()
        request.subject_client_id = subject_client_id
        request.substitute_client_id = substitute_client_id
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/RecoverClient",
            request,
            MsgRecoverClientResponse,
        )

    async def i_b_c_software_upgrade(
        self,
        *,
        plan: Optional[v1beta1.Plan] = None,
        upgraded_client_state: Optional[protobuf.Any] = None,
        signer: str = "",
    ) -> MsgIBCSoftwareUpgradeResponse:
        """
        IBCSoftwareUpgrade defines a rpc handler method for
        MsgIBCSoftwareUpgrade.
        """

        request = MsgIBCSoftwareUpgrade()
        if plan is not None:
            request.plan = plan
        if upgraded_client_state is not None:
            request.upgraded_client_state = upgraded_client_state
        request.signer = signer

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/IBCSoftwareUpgrade",
            request,
            MsgIBCSoftwareUpgradeResponse,
        )

    async def update_client_params(
        self, *, signer: str = "", params: Optional["Params"] = None
    ) -> MsgUpdateParamsResponse:
        """
        UpdateClientParams defines a rpc handler method for MsgUpdateParams.
        """

        request = MsgUpdateParams()
        request.signer = signer
        if params is not None:
            request.params = params

        return await self._unary_unary(
            "/ibc.core.client.v1.Msg/UpdateClientParams",
            request,
            MsgUpdateParamsResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query provides defines the gRPC querier service"""

    async def client_state(self, *, client_id: str = "") -> QueryClientStateResponse:
        """ClientState queries an IBC light client."""

        request = QueryClientStateRequest()
        request.client_id = client_id

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ClientState",
            request,
            QueryClientStateResponse,
        )

    async def client_states(
        self, *, pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryClientStatesResponse:
        """ClientStates queries all the IBC light clients of a chain."""

        request = QueryClientStatesRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ClientStates",
            request,
            QueryClientStatesResponse,
        )

    async def consensus_state(
        self,
        *,
        client_id: str = "",
        revision_number: int = 0,
        revision_height: int = 0,
        latest_height: bool = False,
    ) -> QueryConsensusStateResponse:
        """
        ConsensusState queries a consensus state associated with a client state
        at a given height.
        """

        request = QueryConsensusStateRequest()
        request.client_id = client_id
        request.revision_number = revision_number
        request.revision_height = revision_height
        request.latest_height = latest_height

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ConsensusState",
            request,
            QueryConsensusStateResponse,
        )

    async def consensus_states(
        self, *, client_id: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryConsensusStatesResponse:
        """
        ConsensusStates queries all the consensus state associated with a given
        client.
        """

        request = QueryConsensusStatesRequest()
        request.client_id = client_id
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ConsensusStates",
            request,
            QueryConsensusStatesResponse,
        )

    async def consensus_state_heights(
        self, *, client_id: str = "", pagination: Optional[v1beta1.PageRequest] = None
    ) -> QueryConsensusStateHeightsResponse:
        """
        ConsensusStateHeights queries the height of every consensus states
        associated with a given client.
        """

        request = QueryConsensusStateHeightsRequest()
        request.client_id = client_id
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ConsensusStateHeights",
            request,
            QueryConsensusStateHeightsResponse,
        )

    async def client_status(self, *, client_id: str = "") -> QueryClientStatusResponse:
        """Status queries the status of an IBC client."""

        request = QueryClientStatusRequest()
        request.client_id = client_id

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ClientStatus",
            request,
            QueryClientStatusResponse,
        )

    async def client_params(self) -> QueryClientParamsResponse:
        """ClientParams queries all parameters of the ibc client submodule."""

        request = QueryClientParamsRequest()

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/ClientParams",
            request,
            QueryClientParamsResponse,
        )

    async def upgraded_client_state(self) -> QueryUpgradedClientStateResponse:
        """UpgradedClientState queries an Upgraded IBC light client."""

        request = QueryUpgradedClientStateRequest()

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/UpgradedClientState",
            request,
            QueryUpgradedClientStateResponse,
        )

    async def upgraded_consensus_state(self) -> QueryUpgradedConsensusStateResponse:
        """UpgradedConsensusState queries an Upgraded IBC consensus state."""

        request = QueryUpgradedConsensusStateRequest()

        return await self._unary_unary(
            "/ibc.core.client.v1.Query/UpgradedConsensusState",
            request,
            QueryUpgradedConsensusStateResponse,
        )
