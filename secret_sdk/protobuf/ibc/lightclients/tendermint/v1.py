# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ibc/lightclients/tendermint/v1/tendermint.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List

import betterproto

from .cosmos.ics23 import v1
from .ibc.core.client import v1
from .ibc.core.commitment import v1
from .tendermint import types


@dataclass
class ClientState(betterproto.Message):
    """
    ClientState from Tendermint tracks the current validator set, latest
    height, and a possible frozen height.
    """

    chain_id: str = betterproto.string_field(1)
    trust_level: "Fraction" = betterproto.message_field(2)
    # duration of the period since the LastestTimestamp during which the
    # submitted headers are valid for upgrade
    trusting_period: timedelta = betterproto.message_field(3)
    # duration of the staking unbonding period
    unbonding_period: timedelta = betterproto.message_field(4)
    # defines how much new (untrusted) header's Time can drift into the future.
    max_clock_drift: timedelta = betterproto.message_field(5)
    # Block height when the client was frozen due to a misbehaviour
    frozen_height: v1.Height = betterproto.message_field(6)
    # Latest height the client was updated to
    latest_height: v1.Height = betterproto.message_field(7)
    # Proof specifications used in verifying counterparty state
    proof_specs: List[v1.ProofSpec] = betterproto.message_field(8)
    # Path at which next upgraded client will be committed. Each element
    # corresponds to the key for a single CommitmentProof in the chained proof.
    # NOTE: ClientState must stored under
    # `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be stored
    # under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains using
    # the default upgrade module, upgrade_path should be []string{"upgrade",
    # "upgradedIBCState"}`
    upgrade_path: List[str] = betterproto.string_field(9)
    # allow_update_after_expiry is deprecated
    allow_update_after_expiry: bool = betterproto.bool_field(10)
    # allow_update_after_misbehaviour is deprecated
    allow_update_after_misbehaviour: bool = betterproto.bool_field(11)


@dataclass
class ConsensusState(betterproto.Message):
    """ConsensusState defines the consensus state from Tendermint."""

    # timestamp that corresponds to the block height in which the ConsensusState
    # was stored.
    timestamp: datetime = betterproto.message_field(1)
    # commitment root (i.e app hash)
    root: v1.MerkleRoot = betterproto.message_field(2)
    next_validators_hash: bytes = betterproto.bytes_field(3)


@dataclass
class Misbehaviour(betterproto.Message):
    """
    Misbehaviour is a wrapper over two conflicting Headers that implements
    Misbehaviour interface expected by ICS-02
    """

    # ClientID is deprecated
    client_id: str = betterproto.string_field(1)
    header_1: "Header" = betterproto.message_field(2)
    header_2: "Header" = betterproto.message_field(3)


@dataclass
class Header(betterproto.Message):
    """
    Header defines the Tendermint client consensus Header. It encapsulates all
    the information necessary to update from a trusted Tendermint
    ConsensusState. The inclusion of TrustedHeight and TrustedValidators allows
    this update to process correctly, so long as the ConsensusState for the
    TrustedHeight exists, this removes race conditions among relayers The
    SignedHeader and ValidatorSet are the new untrusted update fields for the
    client. The TrustedHeight is the height of a stored ConsensusState on the
    client that will be used to verify the new untrusted header. The Trusted
    ConsensusState must be within the unbonding period of current time in order
    to correctly verify, and the TrustedValidators must hash to
    TrustedConsensusState.NextValidatorsHash since that is the last trusted
    validator set at the TrustedHeight.
    """

    signed_header: types.SignedHeader = betterproto.message_field(1)
    validator_set: types.ValidatorSet = betterproto.message_field(2)
    trusted_height: v1.Height = betterproto.message_field(3)
    trusted_validators: types.ValidatorSet = betterproto.message_field(4)


@dataclass
class Fraction(betterproto.Message):
    """
    Fraction defines the protobuf message type for tmmath.Fraction that only
    supports positive values.
    """

    numerator: int = betterproto.uint64_field(1)
    denominator: int = betterproto.uint64_field(2)
